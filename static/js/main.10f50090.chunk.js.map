{"version":3,"sources":["parts/Toast.js","utils/Utils.js","parts/Form.js","components/Slacklogo.js","components/Textfield.js","components/Button.js","contexts/AuthContext.js","pages/Signin.js","pages/Signup.js","contexts/SessionContext.js","components/ModalTextfield.js","parts/CreateChannel.js","parts/Sidebar.js","parts/Workspace.js","parts/ChannelnfoModal.js","parts/MainHeader.js","parts/RecipientResults.js","components/MessageSkeleton.js","parts/ChatInterface.js","parts/MobileNavbar.js","pages/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Toast","type","onClick","children","templateClasses","successClasses","errorClasses","className","validateEmail","email","match","is_valid","message","validatePassword","password","length","getAllSubscribedChannels","activeUser","updateChannelList","config","method","url","headers","client","expiry","uid","axios","then","response","data","catch","error","console","log","getChannelData","channelId","updateChannelData","getAllMsgs","receiverId","receiver_class","result","useComponentVisible","initialIsVisible","useState","isComponentVisible","setIsComponentVisible","ref","useRef","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","assignImage","id","n","String","padStart","assignBg","Form","onSubmit","e","preventDefault","Slacklogo","width","height","viewBox","version","xmlns","points","stroke","fill","d","mask","Textfield","label","placeholder","onChange","value","htmlFor","name","Button","color","AuthContext","createContext","AuthContextProvider","isAuthenticated","setIsAuthenticated","setAuth","bool","setActiveUser","setUser","userInfo","JSON","parse","sessionStorage","getItem","setItem","stringify","Provider","Login","setEmail","setPassword","undefined","emailValidationPrompt","setEmailValidationPrompt","passwordValidationPrompt","setPasswordValidationPrompt","useContext","isToastShowing","setIsToastShowing","toastType","toastMsg","toastStat","setToastStat","validators","state","setter","history","useHistory","emailResult","ignoredError","passwordResult","handleValueChange","inputType","handleSignUpClick","forEach","validationPrompt","toggleToast","updateToastStat","errMsg","errors","createUserSession","msg","timer","setTimeout","clearTimeout","push","to","show","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Signup","confirmPassword","setConfirmPassword","confirmPasswordValidationPrompt","setConfirmPasswordValidationPrompt","toastMst","confirmPasswordResult","validateConfirmPassword","confirmedPassword","password_confirmation","status","formattedErrs","full_messages","map","concat","reduce","prev","postUserRegistration","SessionContext","SessionContextProvider","userList","setUserList","channelList","setChannelList","channelData","setChannelData","creator","members","moreChannelData","setMoreChannelData","temp_mems","channel_members","mem","user_id","prevState","filter","user","includes","owner_id","msgRecipient","setMsgRecipient","recipientMetadata","setRecipientMetadata","msgList","setMsgList","isMsgListLoading","setIsMsgListLoading","props","updateUserList","userlist","channellist","channeldata","updateMsgRecipient","recipient","updateRecipientMetadata","updateMsgList","messages","ModalTextfield","labelClass","inputClass","CreateChannel","setOpenModal","openModal","channelName","setChannelName","searchUser","setSearchUser","searchUserList","setSearchUserList","regex","RegExp","test","selectedUsers","setSelectedUsers","handleUserSelect","currentPage","setCurrentPage","offset","pageCount","Math","ceil","appear","as","Fragment","onClose","Child","Overlay","slice","src","defaultChecked","previousLabel","nextLabel","breakLabel","breakClassName","onPageChange","selectedPage","selected","containerClassName","pageClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","pageRangeDisplayed","marginPagesDisplayed","user_ids","postCreateChannel","Sidebar","updateMsgStat","toggleIsSideBarVisible","setDmList","toggleModal","dmList","handleMsgClick","open","Panel","static","channel","Workspace","msgStat","Items","Item","removeUserSession","ChannelInfoModal","inviteRef","handleInviteUserClick","memberId","member_id","postInviteToChannel","MainHeader","classname","RecipientResults","recipientList","resultChannelList","identifier","MessageSkeleton","ChatInterface","msgRef","setRecipientList","setResultChannelList","recipientRef","msgs","handleMsgSubmit","key","shiftKey","receiver_id","body","postMsg","Date","created_at","toLocaleDateString","month","day","i","arr","getDate","weekday","year","sender","toLocaleTimeString","hour","minute","hour12","replace","onKeyPress","MobileNavbar","activeUserProfile","setActiveUserProfile","Main","isNewMessage","setIsNewMessage","updateIsNewMessage","getAllUsers","isSideBarVisible","setIsSideBarVisible","sidebarClass","App","path","Signin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.10f50090.chunk.js","sourcesContent":["import {CheckIcon} from '@heroicons/react/solid';\r\nimport {XIcon} from '@heroicons/react/solid';\r\nimport {ExclamationIcon} from '@heroicons/react/solid'\r\n\r\n\r\nconst Toast = ({type, onClick, children}) => {\r\n\r\n    const templateClasses = {\r\n        body: 'border-l-4 flex items-center py-2 px-3 shadow-md mb-2 justify-between',\r\n        icon: 'rounded-full bg-white mr-3 p-1'\r\n    }\r\n    const successClasses = {\r\n        body: 'bg-green-500 border-green-700',\r\n        icon: 'text-green-500'\r\n    }\r\n    const errorClasses = {\r\n        body: 'bg-red-400 border-red-600',\r\n        icon: 'text-red-400'\r\n    }\r\n    return (\r\n    <>\r\n        <div className='max-w-xl w-full centered-fixed z-10 bottom-10'>\r\n            <div className={\r\n                type === 'success'\r\n                ? `${templateClasses.body} ${successClasses.body}`\r\n                :`${templateClasses.body} ${errorClasses.body}`\r\n                }>\r\n                <div className={\r\n                    type === 'success'\r\n                    ? `${templateClasses.icon} ${successClasses.icon}`\r\n                    :`${templateClasses.icon} ${errorClasses.icon}`\r\n                    }>\r\n                    { type === 'success'\r\n                    ? <CheckIcon className='h-5 w-5'/>\r\n                    : <ExclamationIcon className='h-5 w-5'/>\r\n                    }\r\n                </div>\r\n                <div className='text-white flex-grow mr-auto'>\r\n                    {children}\r\n                </div>\r\n                <div>\r\n                    <XIcon className='h-5 w-5 text-white cursor-pointer hover:close-rotate' onClick={onClick}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n\r\n    )\r\n}\r\n\r\nexport default Toast","import axios from 'axios'\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport Toast from '../parts/Toast'\r\n\r\n/* UTILITY FUNCTIONS RELATED TO VALIDATION */\r\nexport const validateEmail = (email) => {\r\n    const emailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\r\n    //Added email !== null as a condition to account for our new initial states for email, password and confirm password\r\n    if (email !== '' && email !== null) {\r\n        if(email.match(emailformat)) {\r\n            return {\r\n                is_valid: true\r\n            } \r\n        } else {\r\n            return {\r\n                is_valid: false,\r\n                message: 'Please enter a valid email address.'\r\n            } \r\n        }\r\n    } else if (email === '') {\r\n        //Instead of using else, we use else if to restrict the returning of an object only when a user has typed into the input\r\n        return {\r\n            is_valid: false,\r\n            message: 'Email address is required.'\r\n        } \r\n    }\r\n}\r\n\r\nexport const validatePassword = (password) => {\r\n    //Added email !== null as a condition to account for our new initial states for email, password and confirm password\r\n    if(password !== '' && password !== null) {\r\n        if(password.length < 8) {\r\n            return {\r\n                is_valid: false,\r\n                message: 'Password must be at least 8 characters long.'\r\n            }\r\n        }else {\r\n            return {\r\n                is_valid: true,    \r\n            }\r\n        }\r\n    } else if (password === '') {\r\n        //Instead of using else, we use else if to restrict the returning of an object only when a user has typed into the input\r\n        return {\r\n            is_valid: false,\r\n            message: 'Password is required.'\r\n        }\r\n    }\r\n}\r\n\r\nexport const validateConfirmPassword = (password, confirmPassword) => {\r\n    //Added email !== null as a condition to account for our new initial states for email, password and confirm password\r\n    if(confirmPassword !== '' && confirmPassword !== null) {\r\n        if(password === confirmPassword) {\r\n            return {\r\n                is_valid: true\r\n            }\r\n        }else {\r\n            return {\r\n                is_valid: false,\r\n                message: 'The password confirmation does not match.'\r\n            }\r\n        }\r\n    } else if (confirmPassword === '') {\r\n        //Instead of using else, we use else if to restrict the returning of an object only when a user has typed into the input\r\n        return {\r\n            is_valid: false,\r\n            message: 'Password confirmation is required.'\r\n        }\r\n    }\r\n}\r\n/* END OF UTILITY FUNCTIONS RELATED TO VALIDATION */\r\n\r\n\r\n/* UTILITY FUNCTIONS RELATED TO USER */\r\nexport const postUserRegistration = (email, password, confirmedPassword, setAuth, setUser, toggleToast, updateToastStat) => {\r\n    const data = {\r\n        email: email,\r\n        password: password,\r\n        password_confirmation: confirmedPassword \r\n    };\r\n    const config = {\r\n    method: 'POST',\r\n    url: 'https://slackapi.avionschool.com/api/v1/auth',\r\n    headers: {},\r\n    data : data\r\n    };\r\n    \r\n    axios(config)\r\n    .then((response) => {\r\n    if (response.data.status === 'success'){\r\n        //Update login Bool to true. This conditional will be used in pages for redirect/access validation\r\n        setAuth(true);\r\n        //Update activeUser state with an object containing necessary details from header of response\r\n        setUser({\r\n            'access-token': response.headers['access-token'],\r\n            'client': response.headers.client,\r\n            'expiry': response.headers.expiry,\r\n            'uid': response.headers.uid\r\n        });\r\n        //Display success toast\r\n        toggleToast(true);\r\n        updateToastStat('success','Success! Account has been created.')\r\n    }\r\n    })\r\n    .catch((error) => {\r\n        if(error.response) {\r\n            const errMsgs = error.response.data.errors.full_messages\r\n            const formattedErrs = errMsgs.map(msg => msg.concat('.')).reduce((prev, current) => `${prev} ${current}`)\r\n            //Display toast error with error message from response\r\n            toggleToast(true);\r\n            updateToastStat('error', formattedErrs)\r\n            // updateToastMsg(`${error.response.data.errors.full_messages}.`)\r\n        }\r\n    });\r\n\r\n};\r\n\r\nexport const createUserSession = (email, password, setAuth, setUser, toggleToast, updateToastStat) => {\r\n    var data = {\r\n        email: email,\r\n        password: password, \r\n    };\r\n    var config = {\r\n        method: 'POST',\r\n        url: 'https://slackapi.avionschool.com/api/v1/auth/sign_in',\r\n        headers: {},\r\n        data : data\r\n    };\r\n    \r\n    axios(config)\r\n    .then((response) => {\r\n        //Update login Bool to true. This conditional will be used in pages for redirect/access validation\r\n        setAuth(true);\r\n        //Update activeUser state with an object containing necessary details from header of response\r\n        setUser({\r\n            'access-token': response.headers['access-token'],\r\n            'client': response.headers.client,\r\n            'expiry': response.headers.expiry,\r\n            'uid': response.headers.uid\r\n        });\r\n    })\r\n    .catch((error) => {\r\n        if(error.response) {\r\n            const errMsg = error.response.data.errors\r\n            //Display toast error with error message from response\r\n            toggleToast(true);\r\n            updateToastStat('error', errMsg)\r\n            // updateToastMsg(`${error.response.data.errors.full_messages}.`)\r\n        }\r\n    });\r\n};\r\n\r\nexport const removeUserSession = (setAuth, setUser, history) => {\r\n    setAuth(false);\r\n    //setting new values (null), as to somehow delete it from the session storage\r\n    setUser(null);\r\n    //Redirect to Main page\r\n    history.push('/signin')\r\n}\r\n\r\nexport const getAllUsers = (activeUser, updateUserList) => {\r\n    var config = {\r\n        method: 'GET',\r\n        url: 'https://slackapi.avionschool.com/api/v1/users',\r\n        headers: { \r\n            'access-token': activeUser['access-token'],\r\n            'client': activeUser.client, \r\n            'expiry': activeUser.expiry,\r\n            'uid': activeUser.uid\r\n        }\r\n    };\r\n\r\n    axios(config)\r\n    .then(function (response) {\r\n        if(response.data) {\r\n            updateUserList(response.data.data)\r\n        }\r\n    })\r\n    .catch(function (error) {\r\n        console.log(error);\r\n    });\r\n};\r\n/* END OF UTILITY FUNCTIONS RELATED TO USER */\r\n\r\n\r\n/* UTILITY FUNCTIONS RELATED TO CHANNELS */\r\nexport const postCreateChannel = (channelName, user_ids, activeUser, updateChannelList, toggleToast, updateToastStat, setOpenModal) => {\r\n    var data = {\r\n        name: channelName,\r\n        user_ids: user_ids\r\n    };\r\n    var config = {\r\n        method: 'POST',\r\n        url: 'https://slackapi.avionschool.com/api/v1/channels',\r\n        headers: {\r\n            'access-token': activeUser['access-token'],\r\n            'client': activeUser.client, \r\n            'expiry': activeUser.expiry,\r\n            'uid': activeUser.uid\r\n        },\r\n        data : data\r\n    };  \r\n    axios(config)\r\n    .then(function(response) {\r\n        console.log(response)\r\n        if (response.data.data) {\r\n            //Display success toast for creation\r\n            toggleToast(true);\r\n            updateToastStat('success','Success! Channel has been created.')\r\n            //Reload channel list from API to ensure it was added\r\n            getAllSubscribedChannels(activeUser, updateChannelList)\r\n            setOpenModal(false)\r\n            console.log(response)\r\n        } else if (response.data.errors) {\r\n            toggleToast(true);\r\n            updateToastStat('error', response.data.errors[0])\r\n        }\r\n    })\r\n    .catch(function (error) {\r\n        if(error.response) {\r\n            const errMsg = error.response.data.errors\r\n            //Display toast error with error message from response\r\n            toggleToast(true);\r\n            updateToastStat('error', errMsg)\r\n        }\r\n    });\r\n}\r\n\r\nexport const getAllSubscribedChannels = (activeUser, updateChannelList) => {\r\n    var config = {\r\n        method: 'GET',\r\n        url: 'https://slackapi.avionschool.com/api/v1/channels',\r\n        headers: { \r\n            'access-token': activeUser['access-token'],\r\n            'client': activeUser.client, \r\n            'expiry': activeUser.expiry,\r\n            'uid': activeUser.uid\r\n        }\r\n      };\r\n      \r\n    axios(config)\r\n    .then(function (response) {\r\n        if(response.data) {\r\n        //Returns an array of object; each one representing a channel with channel id, name, create date and owner id\r\n        updateChannelList(response.data.data)\r\n        }\r\n    })\r\n    .catch(function (error) {\r\n    console.log(error);\r\n    });\r\n};\r\n\r\n//Honestly don't know the use of this other than displaying a modal containing active members of channel when icon is clicked inside channel\r\nexport const getChannelData = (activeUser, channelId, updateChannelData) => {\r\n    var config = {\r\n        method: 'GET',\r\n        url: `https://slackapi.avionschool.com/api/v1/channels/${channelId}`,\r\n        headers: { \r\n            'access-token': activeUser['access-token'],\r\n            'client': activeUser.client, \r\n            'expiry': activeUser.expiry,\r\n            'uid': activeUser.uid\r\n        }\r\n    };\r\n      \r\n    axios(config)\r\n    .then(function (response) {\r\n        if(response.data) {\r\n        //Returns an object with channel ID, owner ID, channel name, create and update dates and an array called channel members\r\n        //which contains user info as objects\r\n        updateChannelData(response.data.data)\r\n        }\r\n    })\r\n    .catch(function (error) {\r\n    console.log(error);\r\n    });\r\n};\r\n\r\nexport const postInviteToChannel = (activeUser, channelId, memberId, updateChannelData, toggleToast, updateToastStat,setSearchUser) => {\r\n    var data = {\r\n        id: channelId,\r\n        member_id: memberId\r\n    };\r\n    var config = {\r\n        method: 'POST',\r\n        url: `https://slackapi.avionschool.com/api/v1/channel/add_member`,\r\n        headers: { \r\n            'access-token': activeUser['access-token'],\r\n            'client': activeUser.client, \r\n            'expiry': activeUser.expiry,\r\n            'uid': activeUser.uid\r\n        },\r\n        data: data\r\n    };\r\n    \r\n    axios(config)\r\n    .then(function (response) {\r\n        if(response.data) {\r\n            //Returns an object with channel ID, owner ID, channel name, create and update dates and an array called channel members\r\n            //which contains user info as objects\r\n            console.log(response.data.data)\r\n            updateChannelData(response.data.data)\r\n            setSearchUser('')\r\n            toggleToast(true);\r\n            updateToastStat('success','Success! User was added to channel.')\r\n        }\r\n    })\r\n    .catch(function (error) {\r\n        if(error.response) {\r\n            const errMsg = error.response.data.errors\r\n            //Display toast error with error message from response\r\n            toggleToast(true);\r\n            updateToastStat('error', errMsg)\r\n            console.log(error);\r\n        }\r\n    });\r\n};\r\n\r\n/* END UTILITY FUNCTIONS RELATED TO CHANNELS */\r\n\r\n\r\n/* UTILITY FUNCTIONS RELATED TO MESSAGES */\r\nexport const getAllMsgs = (activeUser, receiverId, type) => {\r\n    const receiver_id = receiverId;\r\n    const receiver_class = type;\r\n    var config = {\r\n        method: 'GET',\r\n        url: `https://slackapi.avionschool.com/api/v1/messages?receiver_id=${receiver_id}&receiver_class=${receiver_class}`,\r\n        headers: { \r\n            'access-token': activeUser['access-token'],\r\n            'client': activeUser.client, \r\n            'expiry': activeUser.expiry,\r\n            'uid': activeUser.uid\r\n        }\r\n    };\r\n    var result = [];\r\n    return axios(config)\r\n    .then(function (response) {\r\n        if(response.data) {\r\n            return response.data.data\r\n        }\r\n    })\r\n    .catch(function (error) {\r\n        console.log(error);\r\n        return result\r\n    });\r\n    \r\n};\r\n\r\nexport const postMsg = (activeUser, receiverId, msg, type) => {\r\n    var data = {\r\n        receiver_id: receiverId,\r\n        receiver_class: type,\r\n        body: msg\r\n    };\r\n    var config = {\r\n        method: 'POST',\r\n        url: `https://slackapi.avionschool.com/api/v1/messages`,\r\n        headers: { \r\n            'access-token': activeUser['access-token'],\r\n            'client': activeUser.client, \r\n            'expiry': activeUser.expiry,\r\n            'uid': activeUser.uid\r\n        },\r\n        data: data\r\n    };\r\n    return axios(config)\r\n    .then(function (response) {\r\n        if(response.data) {\r\n            //On success message post, re-fetch the channel messages to update state [TO-DO]\r\n            return getAllMsgs(activeUser, receiverId, type)\r\n        }\r\n    })\r\n    .catch(function (error) {\r\n        console.log(error);\r\n    });\r\n};\r\n\r\n// export const getAllMsgsFromAll = (userList, activeUser, setMsgList) => {\r\n//     const tempArr = []\r\n//     userList.map((user) => {\r\n//         getAllMsgs(activeUser, user.id, 'User')\r\n//             .then((data) => {\r\n//                 if (data.length) {\r\n//                     tempArr.push(user.email) \r\n//                 }\r\n//             })\r\n//     })\r\n//     setMsgList(tempArr)\r\n// }\r\n\r\n/* END OF UTILITY FUNCTIONS RELATED TO MESSAGES */\r\n\r\n/* CUSTOM HOOK FOR OUTSIDE CLICK DETECTION FROM https://codesandbox.io/s/989y0758np */\r\nexport function useComponentVisible(initialIsVisible) {\r\n    const [isComponentVisible, setIsComponentVisible] = useState(initialIsVisible);\r\n    const ref = useRef(null);\r\n    const handleClickOutside = (event) => {\r\n        //Checks if the node which triggered the click contains the child element initially declared in useRef instance\r\n        //Only the wrapper component would contain the child element, so...\r\n        if (ref.current && !ref.current.contains(event.target)) {\r\n            setIsComponentVisible(false);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        document.addEventListener('click', handleClickOutside, true);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutside, true);\r\n        };\r\n    });\r\n    return { ref, isComponentVisible, setIsComponentVisible };\r\n}\r\n/* END OF CUSTOM HOOK FOR OUTSIDE CLICK DETECTION */\r\n\r\n\r\n/* UTIL FUNCTION FOR IMAGE ASSIGNMENT */\r\nexport const assignImage = (id, type) => {\r\n    if (type === \"User\") {\r\n        const n = String(id% 100).padStart(2, '0')\r\n        return `/icons/punk-01${n}.png`\r\n    } else {\r\n        const n = id % 25\r\n        return `/icons/punk${n}@20x.png`\r\n    }\r\n}\r\n/* END OF UTIL FUNCTION FOR IMAGE ASSIGNMENT */\r\n\r\n/* UTIL FUNCTION FOR IMAGE ASSIGNMENT */\r\nexport const assignBg = (id) => {\r\n    switch(id % 4) {\r\n        case 1 :\r\n            return \"bg-red-300 rounded\"\r\n        case 2: \r\n            return \"bg-indigo-200 rounded\"\r\n        case 3:\r\n            return \"bg-green-200 rounded\"\r\n        default:\r\n            return \"bg-yellow-200 rounded\"\r\n    }\r\n}\r\n/* END OF UTIL FUNCTION FOR IMAGE ASSIGNMENT */","\r\nconst Form = ({children}) => {\r\n\r\n    function onSubmitHandler(e){\r\n        e.preventDefault();\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={onSubmitHandler}>\r\n            {children}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","\r\nexport const Slacklogo = ({width, height}) => {\r\n    return (\r\n        <svg width={width} height={height} viewBox=\"0 0 1013 257\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <title>Slack Logo</title>\r\n            <desc>Created with Sketch.</desc>\r\n            <defs>\r\n                <polygon id=\"path-1\" points=\"0 256.5 1012.981 256.5 1012.981 0 0 0\"></polygon>\r\n            </defs>\r\n            <g id=\"Slack-Logo\" stroke=\"none\" fill=\"none\">\r\n                <path d=\"M324.0001,201.9355 L336.5771,172.5945 C350.3481,182.7725 368.3141,188.1615 386.2781,188.1615 C399.4521,188.1615 407.8361,183.0725 407.8361,175.2875 C407.5371,153.7315 328.4921,170.4985 327.8931,116.3035 C327.5921,88.7585 352.1451,67.4995 386.8771,67.4995 C407.5371,67.4995 428.1961,72.5925 442.8671,84.2695 L431.1151,114.2375 C417.6161,105.5745 400.9481,99.5365 385.0811,99.5365 C374.3001,99.5365 367.1151,104.6255 367.1151,111.2145 C367.4151,132.4735 447.0591,120.7955 447.9591,172.5945 C447.9591,200.7395 424.0031,220.4975 389.8701,220.4975 C364.7221,220.4975 341.6671,214.5125 324.0001,201.9355\" id=\"Fill-1\" fill=\"#000000\"></path>\r\n                <path d=\"M809.6163,161.9697 C803.3433,173.0477 791.4593,180.5267 777.8173,180.5267 C757.6433,180.5267 741.2923,164.1747 741.2923,144.0007 C741.2923,123.8267 757.6433,107.4717 777.8173,107.4717 C791.4593,107.4717 803.3433,114.9507 809.6163,126.0287 L844.5813,106.6587 C831.4873,83.2977 806.5033,67.5017 777.8173,67.5017 C735.5693,67.5017 701.3183,101.7487 701.3183,144.0007 C701.3183,186.2497 735.5693,220.4997 777.8173,220.4997 C806.5033,220.4997 831.4873,204.7007 844.5813,181.3397 L809.6163,161.9697 Z\" id=\"Fill-3\" fill=\"#000000\"></path>\r\n                <g id=\"Clip-6\"></g>\r\n                <polygon id=\"Fill-5\" fill=\"#000000\" mask=\"url(#mask-2)\" points=\"465.585 217.505 509.301 217.505 509.301 3.823 465.585 3.823\"></polygon>\r\n                <polygon id=\"Fill-7\" fill=\"#000000\" mask=\"url(#mask-2)\" points=\"861.5909 3.8232 861.5909 217.5052 905.3069 217.5052 905.3069 153.4852 957.1079 217.5052 1012.9809 217.5052 947.1059 141.4512 1008.1889 70.4872 954.7109 70.4872 905.3069 129.4832 905.3069 3.8232\"></polygon>\r\n                <path d=\"M638.9073,70.4946 L638.9073,87.8606 C631.7223,75.8836 614.0553,67.5016 595.4933,67.5016 C557.1683,67.5016 526.9283,101.3346 526.9283,143.8496 C526.9283,186.3676 557.1683,220.4996 595.4933,220.4996 C614.0553,220.4996 631.7223,212.1156 638.9073,200.1376 L638.9073,217.5036 L682.6223,217.5036 L682.6223,70.4946 L638.9073,70.4946 Z M638.9073,162.2636 C632.6193,172.7446 619.4453,180.5266 604.7743,180.5266 C584.6003,180.5266 568.2463,164.1746 568.2463,144.0006 C568.2463,123.8276 584.6003,107.4726 604.7743,107.4726 C619.4453,107.4726 632.6193,115.5566 638.9073,126.3346 L638.9073,162.2636 Z\" id=\"Fill-8\" fill=\"#000000\" mask=\"url(#mask-2)\"></path>\r\n                <path d=\"M54.0001,162 C54.0001,176.912 41.9121,189 27.0001,189 C12.0881,189 0.0001,176.912 0.0001,162 C0.0001,147.088 12.0881,135 27.0001,135 L54.0001,135 L54.0001,162 Z\" id=\"Fill-9\" fill=\"#E01E5A\" mask=\"url(#mask-2)\"></path>\r\n                <path d=\"M67.5001,162 C67.5001,147.088 79.5881,135 94.5001,135 C109.4121,135 121.5001,147.088 121.5001,162 L121.5001,229.5 C121.5001,244.412 109.4121,256.5 94.5001,256.5 C79.5881,256.5 67.5001,244.412 67.5001,229.5 L67.5001,162 Z\" id=\"Fill-10\" fill=\"#E01E5A\" mask=\"url(#mask-2)\"></path>\r\n                <path d=\"M94.5001,54 C79.5881,54 67.5001,41.912 67.5001,27 C67.5001,12.088 79.5881,0 94.5001,0 C109.4121,0 121.5001,12.088 121.5001,27 L121.5001,54 L94.5001,54 Z\" id=\"Fill-11\" fill=\"#36C5F0\" mask=\"url(#mask-2)\"></path>\r\n                <path d=\"M94.5001,67.5 C109.4121,67.5 121.5001,79.588 121.5001,94.5 C121.5001,109.412 109.4121,121.5 94.5001,121.5 L27.0001,121.5 C12.0881,121.5 0.0001,109.412 0.0001,94.5 C0.0001,79.588 12.0881,67.5 27.0001,67.5 L94.5001,67.5 Z\" id=\"Fill-12\" fill=\"#36C5F0\" mask=\"url(#mask-2)\"></path>\r\n                <path d=\"M202.5001,94.5 C202.5001,79.588 214.5881,67.5 229.5001,67.5 C244.4121,67.5 256.5001,79.588 256.5001,94.5 C256.5001,109.412 244.4121,121.5 229.5001,121.5 L202.5001,121.5 L202.5001,94.5 Z\" id=\"Fill-13\" fill=\"#2EB67D\" mask=\"url(#mask-2)\"></path>\r\n                <path d=\"M189.0001,94.5 C189.0001,109.412 176.9121,121.5 162.0001,121.5 C147.0881,121.5 135.0001,109.412 135.0001,94.5 L135.0001,27 C135.0001,12.088 147.0881,0 162.0001,0 C176.9121,0 189.0001,12.088 189.0001,27 L189.0001,94.5 Z\" id=\"Fill-14\" fill=\"#2EB67D\" mask=\"url(#mask-2)\"></path>\r\n                <path d=\"M162.0001,202.5 C176.9121,202.5 189.0001,214.588 189.0001,229.5 C189.0001,244.412 176.9121,256.5 162.0001,256.5 C147.0881,256.5 135.0001,244.412 135.0001,229.5 L135.0001,202.5 L162.0001,202.5 Z\" id=\"Fill-15\" fill=\"#ECB22E\" mask=\"url(#mask-2)\"></path>\r\n                <path d=\"M162.0001,189 C147.0881,189 135.0001,176.912 135.0001,162 C135.0001,147.088 147.0881,135 162.0001,135 L229.5001,135 C244.4121,135 256.5001,147.088 256.5001,162 C256.5001,176.912 244.4121,189 229.5001,189 L162.0001,189 Z\" id=\"Fill-16\" fill=\"#ECB22E\" mask=\"url(#mask-2)\"></path>\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\n\r\n","\r\nconst Textfield = ({label, id, type, placeholder, onChange, value}) => {\r\n    \r\n    return (\r\n        <div className='flex flex-col'>\r\n            <label htmlFor={id}>{label}</label>\r\n            <input \r\n            onChange={onChange}\r\n            value={value}\r\n            className='border border-gray p-3 rounded p-2 '\r\n            id={id} \r\n            name={id} \r\n            type={type} \r\n            placeholder={placeholder}/>\r\n        </div>\r\n            \r\n    )\r\n}\r\n\r\nexport default Textfield\r\n","\r\nconst Button = ({children, color, onClick}) => {\r\n    return (\r\n        <button onClick={onClick}className='px-2 py-3 rounded bg-green-400 text-white'>{children}</button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import {useState, createContext, useEffect} from 'react';\r\n\r\n//We first create a context--similar to State, but mutable and can be accessed by any consumer/child by using useContext \r\nexport const AuthContext = createContext();\r\n\r\nconst AuthContextProvider = ({children}) => {\r\n    \r\n    //These are the states we're initializing to store component data related to user Login/Authentication status and their authentication credentials\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const setAuth = (bool) => {\r\n        setIsAuthenticated(bool)\r\n    }\r\n    const [activeUser, setActiveUser] = useState(null)\r\n    const setUser = (userInfo) => {\r\n        setActiveUser(userInfo)\r\n    }\r\n\r\n\r\n    //Pull Auth state data from session storage and set current states to that on mount\r\n    useEffect(()=>{\r\n        setAuth(JSON.parse(sessionStorage.getItem('isAuthenticated')));\r\n        setUser(JSON.parse(sessionStorage.getItem('activeUser')));\r\n    },[])\r\n\r\n    //Save Auth states to Session storage on set/change\r\n    useEffect(()=>{\r\n        sessionStorage.setItem('isAuthenticated', JSON.stringify(isAuthenticated));\r\n        sessionStorage.setItem('activeUser', JSON.stringify(activeUser));\r\n    },[isAuthenticated, activeUser])\r\n\r\n    return (\r\n        //We add the Provider property from the created AuthContext object which will provide all children with necessary values/states without\r\n        //passing them directly as props. In this case, we pass our user login states and updaters to the value prop of Provider,\r\n        //so we can access these in children components using useContext\r\n        <AuthContext.Provider value={{isAuthenticated, setAuth, activeUser, setUser}}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthContextProvider\r\n","import { useState, useEffect, useContext } from 'react'\r\nimport {createUserSession} from '../utils/Utils'\r\nimport Form from '../parts/Form'\r\nimport { useHistory } from 'react-router'\r\nimport { Slacklogo } from '../components/Slacklogo'\r\nimport Textfield from '../components/Textfield'\r\nimport Button from '../components/Button'\r\nimport { validateEmail, validatePassword} from '../utils/Utils'\r\nimport { Transition } from '@headlessui/react'\r\nimport Toast from '../parts/Toast'\r\nimport { AuthContext } from '../contexts/AuthContext'\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n    const [email, setEmail] = useState(null)\r\n    const [password, setPassword] = useState(null)\r\n    const [emailValidationPrompt, setEmailValidationPrompt] = useState(undefined)\r\n    const [passwordValidationPrompt, setPasswordValidationPrompt] = useState(undefined)\r\n    const {isAuthenticated, setAuth, activeUser, setUser} = useContext(AuthContext)\r\n    const [isToastShowing, setIsToastShowing] = useState(false)\r\n    const [toastStat, setToastStat] = useState({\r\n        toastType: '',\r\n        toastMsg: ''\r\n    });\r\n\r\n    //Instantiated an array of objects with state as the validationPrompt state and setter for the corresponding setState\r\n    //This is so we have a checklist to loop through\r\n    const validators = [{\r\n        state: emailValidationPrompt,\r\n        setter: setEmail\r\n    },\r\n    {   state: passwordValidationPrompt,\r\n        setter: setPassword\r\n    }\r\n    ]\r\n\r\n    const history = useHistory();\r\n\r\n    console.log(activeUser)\r\n    useEffect(() => {\r\n        let emailResult = validateEmail(email)\r\n        const ignoredError = 'Please enter a valid email address.'\r\n        if (emailResult?.is_valid || emailResult?.message === ignoredError) {\r\n            setEmailValidationPrompt(null);\r\n        } else if (emailResult?.message !== ignoredError) {\r\n            setEmailValidationPrompt(emailResult?.message);\r\n        }\r\n    }, [email]) \r\n\r\n    useEffect(() => {\r\n        let passwordResult = validatePassword(password)\r\n        const ignoredError = 'Password must be at least 8 characters long.'\r\n        if (passwordResult?.is_valid || passwordResult?.message === ignoredError) {\r\n            setPasswordValidationPrompt(null);\r\n        } else if (passwordResult?.message !== ignoredError) {\r\n            setPasswordValidationPrompt(passwordResult?.message)\r\n        }\r\n    }, [password]) \r\n\r\n    const handleValueChange = (e, inputType) => {\r\n        if(inputType === 'email') {\r\n            setEmail(e.target.value)\r\n        }else if(inputType === 'password') {\r\n            setPassword(e.target.value)\r\n        } \r\n    }\r\n    const handleSignUpClick = (validators) => {\r\n        validators.forEach((validationPrompt) => {\r\n            if (validationPrompt.state === undefined) {\r\n                validationPrompt.setter('')\r\n            }\r\n        })\r\n        if(emailValidationPrompt === null && passwordValidationPrompt === null){\r\n            createUserSession(email, password, setAuth, setUser, toggleToast, updateToastStat)\r\n        }\r\n    }\r\n\r\n    /*----TOAST HANDLER FUNCTIONS----*/\r\n    const toggleToast = (bool) => {\r\n        setIsToastShowing(bool);\r\n    }\r\n    \r\n    const updateToastStat = (type, msg) => {\r\n        setToastStat({\r\n            toastType: type,\r\n            toastMsg: msg\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setIsToastShowing(false);\r\n        },3000)\r\n        return () => clearTimeout(timer);\r\n    }, [isToastShowing]) \r\n\r\n    useEffect(() => {\r\n       if (activeUser) {\r\n           history.push('/')\r\n       }\r\n    }, [activeUser]) \r\n\r\n    useEffect(() => {\r\n        if (isAuthenticated && activeUser) {\r\n            return <Redirect to='/' />\r\n        }\r\n     }, []) \r\n\r\n\r\n\r\n    return (\r\n        <div className='h-full p-10 flex flex-col items-center justify-center'>\r\n            <div className='flex justify-center my-10'>\r\n                <Slacklogo width={145}/>\r\n            </div>\r\n            <h2 className='text-center text-2xl lg:text-5xl'>Avion School on Slack</h2>\r\n            <p className='text-center text-lg lg:text-xl my-5'>Sign in to your account</p>\r\n            <div className='w-96 lg:w-2/5 my-5 px-5'>\r\n                <Form>\r\n                    <div className='flex flex-col gap-4 p-2'>\r\n                    <Textfield label='Email' value={email === null ? '' : email} onChange={(e) => {handleValueChange(e,'email')} } id='email' type='text' placeholder='Enter your email'/>\r\n                        {emailValidationPrompt && <span className='text-red-400'>{emailValidationPrompt}</span>}\r\n                        <Textfield label='Password' value={password === null ? '' : password} onChange={(e) => {handleValueChange(e,'password')}} id='password' type='password' placeholder='Enter a password'/>\r\n                        {passwordValidationPrompt && <span className='text-red-400'>{passwordValidationPrompt}</span>}\r\n                        <Button onClick={()=>handleSignUpClick(validators)}>Sign In</Button>\r\n                        <span>Don't have an account yet? <br/>\r\n                        <Link to='/signup' className=\"text-blue-800 underline font-semibold\"> Create an account</Link></span>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n            <Transition\r\n                show={isToastShowing}\r\n                enter=\"transition-opacity duration-75\"\r\n                enterFrom=\"opacity-0\"\r\n                enterTo=\"opacity-100\"\r\n                leave=\"transition-opacity duration-150\"\r\n                leaveFrom=\"opacity-100\"\r\n                leaveTo=\"opacity-0\"\r\n            >\r\n                <Toast type={toastStat.toastType} onClick={() => {toggleToast(false)}}>{toastStat.toastMsg}</Toast>\r\n            </Transition>        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import Form from '../parts/Form'\r\nimport { Slacklogo } from '../components/Slacklogo'\r\nimport Textfield from '../components/Textfield'\r\nimport Button from '../components/Button'\r\nimport { useState, useEffect, useContext} from 'react'\r\nimport { validateConfirmPassword, validateEmail, validatePassword} from '../utils/Utils'\r\nimport {postUserRegistration} from '../utils/Utils'\r\nimport { useHistory } from 'react-router'\r\nimport { AuthContext } from '../contexts/AuthContext'\r\nimport { Transition } from '@headlessui/react'\r\nimport Toast from '../parts/Toast'\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\nconst Signup = () => {\r\n    //Initialize email, password and confirmPassword to null instead of empty string so that we can add a validation conditional\r\n    // to only display error messages for empty string states (which happens when they start typing and not on load)\r\n    const [email, setEmail] = useState(null)\r\n    const [password, setPassword] = useState(null)\r\n    const [confirmPassword, setConfirmPassword] = useState(null)\r\n    const [emailValidationPrompt, setEmailValidationPrompt] = useState(undefined)\r\n    const [passwordValidationPrompt, setPasswordValidationPrompt] = useState(undefined)\r\n    const [confirmPasswordValidationPrompt, setConfirmPasswordValidationPrompt] = useState(undefined)\r\n    const {isAuthenticated, setAuth, activeUser, setUser} = useContext(AuthContext)\r\n    const [isToastShowing, setIsToastShowing] = useState(false)\r\n    const [toastStat, setToastStat] = useState({\r\n        toastType: '',\r\n        toastMst: ''\r\n    });\r\n\r\n    //Instantiated an array of objects with state as the validationPrompt state and setter for the corresponding setState\r\n    //This is so we have a checklist to loop through\r\n    const validators = [{\r\n        state: emailValidationPrompt,\r\n        setter: setEmail\r\n    },\r\n    {   state: passwordValidationPrompt,\r\n        setter: setPassword\r\n    },\r\n    {   state: confirmPasswordValidationPrompt,\r\n        setter: setConfirmPassword\r\n    }\r\n    ]\r\n\r\n    const history = useHistory();\r\n \r\n    useEffect(() => {\r\n        let emailResult = validateEmail(email)\r\n        // On load, emailResult will return UNDEFINED. As long as user has not started typing, everything here will be undefined. \r\n        if (emailResult?.is_valid) {\r\n            setEmailValidationPrompt(null);\r\n        } else {\r\n            //Because validateEmail only returns an object when email is not null (e.g. when user has begun typing), \r\n            //No error message will be displayed until then\r\n            setEmailValidationPrompt(emailResult?.message);\r\n        }\r\n    }, [email]) \r\n\r\n    useEffect(() => {\r\n        let passwordResult = validatePassword(password)\r\n        // On load, passwordResult will return UNDEFINED. As long as user has not started typing, everything here will be undefined.\r\n        if (passwordResult?.is_valid) {\r\n            setPasswordValidationPrompt(null);\r\n        } else {\r\n            setPasswordValidationPrompt(passwordResult?.message)\r\n        }\r\n    }, [password]) \r\n\r\n    useEffect(() => {\r\n        let confirmPasswordResult = validateConfirmPassword(password, confirmPassword)\r\n        // On load, confirmPasswordResult will return UNDEFINED. As long as user has not started typing, everything here will be undefined.\r\n        if (confirmPasswordResult?.is_valid) {\r\n            setConfirmPasswordValidationPrompt(null) \r\n        } else {\r\n            setConfirmPasswordValidationPrompt(confirmPasswordResult?.message)\r\n        }\r\n    }, [confirmPassword]) \r\n\r\n\r\n    const handleSignUpClick = (validators) => {\r\n        //Loop through validators' array objects and check if the validationPrompt is undefined--this means that the user has not touched the input\r\n        //if true, then setState the corresponding field to an empty string to make the error appear\r\n        validators.forEach((validationPrompt) => {\r\n            if (validationPrompt.state === undefined) {\r\n                validationPrompt.setter('')\r\n            }\r\n        })\r\n        if (emailValidationPrompt === null && passwordValidationPrompt === null && confirmPasswordValidationPrompt === null) {\r\n            postUserRegistration(email, password, confirmPassword, setAuth, setUser, toggleToast, updateToastStat)\r\n        }\r\n    }\r\n\r\n    /*----INPUT HANDLERS----*/\r\n    const handleValueChange = (e, inputType) => {\r\n        if(inputType === 'email') {\r\n            setEmail(e.target.value)\r\n        } else if(inputType === 'password') {\r\n            setPassword(e.target.value)\r\n        } else if(inputType === 'confirmPassword') {\r\n            setConfirmPassword(e.target.value)\r\n        }    \r\n    }\r\n\r\n    /*----TOAST HANDLER FUNCTIONS----*/\r\n    const toggleToast = (bool) => {\r\n        setIsToastShowing(bool);\r\n    }\r\n    \r\n    const updateToastStat = (type, msg) => {\r\n        setToastStat({\r\n            toastType: type,\r\n            toastMsg: msg\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setIsToastShowing(false);\r\n            if (activeUser) {\r\n                history.push('/')\r\n            }\r\n        },2000)\r\n        return () => clearTimeout(timer);\r\n    }, [isToastShowing]) \r\n\r\n    //Wrapped Redirect in a on-mount useEffect so that it will not be triggered by re-renders caused by updates to Global States\r\n    //like setIsAuthenticated or setUser. This way, only history.push can redirect the user (after displaying success toast)\r\n    useEffect(() => {\r\n        if (isAuthenticated && activeUser) {\r\n            return <Redirect to='/' />\r\n        }\r\n     }, []) \r\n\r\n    return (\r\n        <div className='h-full p-10 flex flex-col items-center justify-center'>\r\n            <div className='flex justify-center my-10'>\r\n                <Slacklogo width={150}/>\r\n            </div>\r\n            <h2 className='text-center text-2xl lg:text-5xl'>Join Avion School on Slack</h2>\r\n            <p className='text-center text-xl lg:text-xl my-5'>Start by entering the email address you use for work.</p>\r\n            <div className='w-96 lg:w-2/5 my-5 px-5'>\r\n                <Form>\r\n                    <div className='flex flex-col gap-4 p-2'>\r\n                        <Textfield label='Email' value={email === null ? '' : email} onChange={(e) => {handleValueChange(e,'email')} } id='email' type='text' placeholder='Enter your email'/>\r\n                        {emailValidationPrompt && <span className='text-red-400'>{emailValidationPrompt}</span>}\r\n                        <Textfield label='Password' value={password === null ? '' : password} onChange={(e) => {handleValueChange(e,'password')}} id='password' type='password' placeholder='Enter a password'/>\r\n                        {passwordValidationPrompt && <span className='text-red-400'>{passwordValidationPrompt}</span>}\r\n                        <Textfield label='Confirm Password' value={confirmPassword === null ? '' : confirmPassword} onChange={(e) => {handleValueChange(e,'confirmPassword')}} id='confirm_pw' type='password' placeholder='Confirm your password'/>\r\n                        {confirmPasswordValidationPrompt && <span className='text-red-400'>{confirmPasswordValidationPrompt}</span>}\r\n                        <Button onClick={() => handleSignUpClick(validators)}>Sign Up</Button>\r\n                        {/* <span>Already have an account? <Link to=\"/signin\" className=\"text-blue-800 underline font-semibold\"> Sign in instead</Link></span> */}\r\n                        <span>Already have an account? <Link to=\"/signin\" className=\"text-blue-800 underline font-semibold\"> Sign in instead</Link></span>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n            <Transition\r\n                show={isToastShowing}\r\n                enter=\"transition-opacity duration-75\"\r\n                enterFrom=\"opacity-0\"\r\n                enterTo=\"opacity-100\"\r\n                leave=\"transition-opacity duration-150\"\r\n                leaveFrom=\"opacity-100\"\r\n                leaveTo=\"opacity-0\"\r\n            >\r\n                <Toast type={toastStat.toastType} onClick={() => {toggleToast(false)}}>{toastStat.toastMsg}</Toast>\r\n            </Transition>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup\r\n","import {useState, createContext, useEffect} from 'react';\r\n\r\n//We first create a context--similar to State, but mutable and can be accessed by any consumer/child by using useContext \r\nexport const SessionContext = createContext();\r\n\r\nconst SessionContextProvider = ({children}) => {\r\n    \r\n    //These are the states we're initializing to store component data related to user Login/Authentication status and their authentication credentials\r\n    const [userList, setUserList] = useState(null);\r\n    const updateUserList = (userlist) => {\r\n        setUserList(userlist)\r\n    }\r\n    const [channelList, setChannelList] = useState(null);\r\n    const updateChannelList = (channellist) => {\r\n        setChannelList(channellist)\r\n    }\r\n    const [channelData, setChannelData] = useState(null);\r\n    const updateChannelData = (channeldata) => {\r\n        setChannelData(channeldata)\r\n    }\r\n    const [moreChannelData, setMoreChannelData] = useState({creator:'', members:''})\r\n    useEffect(() => {\r\n        if (channelData) {\r\n            const temp_mems = channelData.channel_members.map( mem => mem.user_id)\r\n            setMoreChannelData((prevState) => ({\r\n                ...prevState,\r\n                members: userList.filter(user => temp_mems.includes(user.id))\r\n            }))\r\n            setMoreChannelData((prevState) => ({\r\n                ...prevState,\r\n                creator: userList.filter(user => user.id === channelData.owner_id)\r\n            }))\r\n            \r\n        }\r\n    },[channelData])\r\n    \r\n    const [msgRecipient, setMsgRecipient] = useState('');\r\n    const updateMsgRecipient = (recipient) => {\r\n        setMsgRecipient(recipient)\r\n    }\r\n    const [recipientMetadata, setRecipientMetadata] = useState({id:'', type:''});\r\n    const updateRecipientMetadata = (id, type) => {\r\n        setRecipientMetadata({\r\n            id: id,\r\n            type: type\r\n        })\r\n    }\r\n    const [msgList, setMsgList] = useState([])\r\n    const updateMsgList = (messages) => {\r\n        setMsgList(messages)\r\n    }\r\n    const [isMsgListLoading, setIsMsgListLoading] = useState(true)\r\n    useEffect(() => {\r\n        // if (msgList?.length) {\r\n            // setIsMsgListLoading(false)\r\n        // }\r\n        const timer = setTimeout(() => {\r\n            setIsMsgListLoading(false)\r\n        }, 1000)\r\n        return ()=>{clearTimeout(timer)}\r\n    },[msgList])\r\n    \r\n\r\n    const props = {\r\n        userList,\r\n        updateUserList,\r\n        channelList,\r\n        updateChannelList,\r\n        channelData,\r\n        updateChannelData,\r\n        msgRecipient,\r\n        updateMsgRecipient,\r\n        recipientMetadata,\r\n        updateRecipientMetadata,\r\n        msgList,\r\n        updateMsgList,\r\n        moreChannelData,\r\n        isMsgListLoading, \r\n        setIsMsgListLoading\r\n    }\r\n\r\n    return (\r\n        //We add the Provider property from the created AuthContext object which will provide all children with necessary values/states without\r\n        //passing them directly as props. In this case, we pass our user login states and updaters to the value prop of Provider,\r\n        //so we can access these in children components using useContext\r\n        <SessionContext.Provider value={props}>\r\n            {children}\r\n        </SessionContext.Provider>\r\n    )\r\n}\r\n\r\nexport default SessionContextProvider\r\n","\r\nconst ModalTextfield = ({label, id, type, placeholder, onChange, value, labelClass, inputClass}) => {\r\n    \r\n    return (\r\n        <div className='flex flex-col'>\r\n            <label htmlFor={id} className={labelClass}>{label}</label>\r\n            <input \r\n            onChange={onChange}\r\n            value={value}\r\n            className={inputClass}\r\n            id={id} \r\n            name={id} \r\n            type={type} \r\n            placeholder={placeholder}/>\r\n        </div>\r\n            \r\n    )\r\n}\r\n\r\nexport default ModalTextfield\r\n","import { useState, useEffect, useContext, Fragment } from 'react'\r\nimport { AuthContext } from '../contexts/AuthContext'\r\nimport ModalTextfield from '../components/ModalTextfield';\r\nimport { postCreateChannel, assignImage, assignBg } from '../utils/Utils';\r\nimport { Dialog, Transition  } from '@headlessui/react'\r\nimport { SessionContext } from '../contexts/SessionContext'\r\nimport ReactPaginate from 'react-paginate';\r\nimport { ChevronLeftIcon} from '@heroicons/react/outline';\r\nimport { ChevronRightIcon } from '@heroicons/react/outline';\r\nimport { XIcon } from '@heroicons/react/solid';\r\n\r\n\r\nconst CreateChannel = ({setOpenModal, openModal, toggleToast, updateToastStat}) => {\r\n  const { activeUser } = useContext(AuthContext)\r\n  const { userList, updateChannelList} = useContext(SessionContext)\r\n\r\n  //handling input channel name\r\n  const [channelName, setChannelName] = useState(null)\r\n  const handleChannelName =  (e) => {\r\n    setChannelName(e.target.value)\r\n  }\r\n\r\n  //handling change for search bar\r\n  const [searchUser, setSearchUser] = useState('') \r\n  //states for searching users email at the search bar\r\n  const [searchUserList, setSearchUserList] = useState([])\r\n\r\n  // if searched user (email) matches an email in the userList, set it to searchUserList\r\n  useEffect(() => {\r\n    if (searchUser !== '') {\r\n      const regex = new RegExp(`${searchUser}`, 'i')\r\n      setSearchUserList(userList?.filter(user => regex.test(user.uid)))\r\n    } else {\r\n      setSearchUserList(userList) //should this be an empty array instead?\r\n    }\r\n  },[searchUser])\r\n  // initial states for checked users in the checkbox\r\n  const [selectedUsers, setSelectedUsers] = useState([])\r\n  //setting the selected users in an array\r\n  const handleUserSelect = (e) => {\r\n    if(selectedUsers.includes(e.target.value)) {\r\n      setSelectedUsers((prevState) => [...prevState, e.target.value])\r\n    } else {\r\n      setSelectedUsers(selectedUsers.filter(email => email !== e.target.value));\r\n\r\n    }\r\n  }\r\n\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const PER_PAGE = 10;\r\n  const offset = currentPage * PER_PAGE;\r\n  const pageCount = Math.ceil(searchUserList?.length / PER_PAGE);\r\n\r\n  //handling input search user\r\n  const handleSearchUser = (e) => {\r\n    setSearchUser(e.target.value)\r\n  }\r\n\r\n  //invokes API request\r\n  const handleCreateChannelClick = () => {\r\n    postCreateChannel(channelName, selectedUsers, activeUser, updateChannelList, toggleToast, updateToastStat, setOpenModal)\r\n  }\r\n\r\n  //handles setting of clicked page\r\n  const handlePageClick = ({ selected: selectedPage }) => {\r\n    setCurrentPage(selectedPage);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Transition appear show={openModal} as={Fragment}>\r\n        <Dialog\r\n          as=\"div\"\r\n          className=\"fixed inset-0 z-10 overflow-y-auto\"\r\n          onClose={() => setOpenModal(false)}\r\n        >\r\n          <div className=\"min-h-screen px-4 text-center \">\r\n            <Transition.Child\r\n              as={Fragment}\r\n              enter=\"ease-out duration-300\"\r\n              enterFrom=\"opacity-0\"\r\n              enterTo=\"opacity-100\"\r\n              leave=\"ease-in duration-200\"\r\n              leaveFrom=\"opacity-100\"\r\n              leaveTo=\"opacity-0\"\r\n            >\r\n              <Dialog.Overlay className=\"fixed inset-0\" />\r\n            </Transition.Child>\r\n\r\n            {/* This element is to trick the browser into centering the modal contents. */}\r\n            <span\r\n              className=\"inline-block h-screen align-middle\"\r\n              aria-hidden=\"true\"\r\n            >\r\n        \r\n            </span>\r\n            <Transition.Child\r\n              as={Fragment}\r\n              enter=\"ease-out duration-300\"\r\n              enterFrom=\"opacity-0 scale-95\"\r\n              enterTo=\"opacity-100 scale-100\"\r\n              leave=\"ease-in duration-200\"\r\n              leaveFrom=\"opacity-100 scale-100\"\r\n              leaveTo=\"opacity-0 scale-95\"\r\n            >\r\n              <div className=\"inline-block modal-width bg-gray-800 p-4 my-8 overflow-hidden text-left align-middle transition-all transform shadow-md rounded-lg border border-black min-w-200\">\r\n                <div className=\"flex justify-between items-center\"> \r\n                  <h3 className=\"text-gray-100 text-lg mb-1\">Create a Channel</h3>\r\n                  <XIcon className=\"h-5 w-5 cursor-pointer text-gray-100\" onClick={() => setOpenModal(false)}/>\r\n                </div>\r\n                <p className=\"text-gray-400 text-xs mb-6\">Make a channel name no longer than 15 characters and select users to add to your channel.</p>\r\n                <div className=\"mt-2\">\r\n                  <ModalTextfield onChange={handleChannelName} id='channelName' type='text' placeholder='Type a channel name' labelClass=\"text-gray-200\" \r\n                    inputClass=\"mt-2 py-1 px-2 rounded bg-gray-900 text-sm text-gray-300 border-transparent focus:ring-0 focus:outline-none focus:border-transparent\"/>\r\n                  <ModalTextfield onChange={handleSearchUser} type='text' placeholder=\"Type the email of a friend\" labelClass=\"text-gray-200 mt-2\" \r\n                    inputClass=\"mt-2 py-1 px-2 rounded bg-gray-900 text-sm text-gray-300 border-transparent focus:ring-0 focus:outline-none focus:border-transparent\"/>\r\n                </div>\r\n                <div className=\"mt-6\">\r\n                  {/* <span className=\"text-gray-200\">List of friends</span> */}\r\n                  <ul className=\"h-40 overflow-y-scroll modal-scrollbar\">\r\n                    {searchUserList?.slice(offset, offset + PER_PAGE).map(user => (\r\n                      <li key={user.uid} className=\"flex py-1 px-2 items-center hover:bg-gray-600 cursor-pointer\">   \r\n                        <div className=\"flex justify-center items-center h-6 w-6 mr-2 flex-shrink-0\">\r\n                            <span className={assignBg(user?.id)}>\r\n                                <img src={assignImage(user?.id, \"User\")} className=\"h-6 w-6 items-center\"/>\r\n                            </span>\r\n                        </div>                   \r\n                        <label htmlFor={user.uid} className=\"text-gray-300 text-sm cursor-pointer\" onClick={handleUserSelect}>\r\n                          {user.uid}\r\n                          <span className=\"pl-2 text-gray-400\">(UID: {user.id})</span>\r\n                        </label>\r\n                        <input onClick={handleUserSelect} className=\"ml-auto border border-gray-300 bg-transparent rounded focus:ring-0 focus:ring-offset-0 focus:outline-none active:ring-0 checked:bg-green-300\r\n                          text-green-300 w-5 h-5 cursor-pointer\" \r\n                          id={user.uid} type='checkbox' defaultChecked={selectedUsers.includes(String(user.id))} value={user.id}/>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                  <div id='react-paginate' className=\"pt-6 pb-2\">\r\n                    <ReactPaginate\r\n                      previousLabel={<ChevronLeftIcon className=\"h-5 w-5\"/>}\r\n                      nextLabel={<ChevronRightIcon className=\"h-5 w-5\"/>}\r\n                      pageCount={pageCount}\r\n                      breakLabel={\"...\"}\r\n                      breakClassName={\"m-0 py-1 px-3 text-gray-300 flex items-center\"}\r\n                      onPageChange={handlePageClick}\r\n                      containerClassName={\"items-center justify-center flex\"}\r\n                      pageClassName\t= {\"m-0 py-1 px-3 mx-2 text-gray-300\"}\r\n                      previousLinkClassName={\"text-gray-300 mr-2 flex items-center\"}\r\n                      nextLinkClassName={\"text-gray-300 ml-2 flex items-center\"}\r\n                      disabledClassName={\"pagination__link--disabled\"}\r\n                      activeClassName={\"bg-gray-600 border border-gray-500 text-gray-300 rounded\"}\r\n                      pageRangeDisplayed={3}\r\n                      marginPagesDisplayed={0}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"w-full px-4 py-2 text-sm font-large text-green-900 bg-green-200 border border-transparent rounded-md hover:bg-green-300 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-blue-500\"\r\n                    onClick={handleCreateChannelClick} \r\n                  >\r\n                    Create New Channel\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Transition.Child>\r\n          </div>\r\n        </Dialog>\r\n      </Transition>       \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateChannel\r\n","import { Disclosure } from '@headlessui/react';\r\nimport { useState, useContext, useEffect } from 'react';\r\nimport CreateChannel from './CreateChannel';\r\nimport { AuthContext } from '../contexts/AuthContext'\r\nimport { SessionContext } from '../contexts/SessionContext';\r\nimport { getChannelData } from '../utils/Utils';\r\nimport { assignImage, assignBg} from \"../utils/Utils\";\r\nimport { ChevronRightIcon, PlusSmIcon } from '@heroicons/react/solid';\r\nimport { Transition } from '@headlessui/react'\r\nimport Toast from './Toast';\r\n\r\n\r\nconst Sidebar = ({updateMsgStat, toggleIsSideBarVisible}) => {\r\n    const { activeUser } = useContext(AuthContext)\r\n    const { userList, channelList, updateChannelData, updateRecipientMetadata, updateMsgRecipient, updateMsgList, setIsMsgListLoading  } = useContext(SessionContext)\r\n    useEffect(() => {\r\n        setDmList(userList?.slice(-10))\r\n    },[userList])\r\n\r\n    //Create Util function to open modal when Add Channel is clicked\r\n    const [openModal, setOpenModal] = useState(false)\r\n    const toggleModal = () => {\r\n        setOpenModal(!openModal)\r\n        toggleIsSideBarVisible()\r\n    }\r\n    const [dmList, setDmList] = useState(null)\r\n    const [isToastShowing, setIsToastShowing] = useState(false)\r\n    const [toastStat, setToastStat] = useState({\r\n        toastType: '',\r\n        toastMsg: ''\r\n    });\r\n\r\n    /*----TOAST HANDLER FUNCTIONS----*/\r\n    const toggleToast = (bool) => {\r\n        setIsToastShowing(bool);\r\n    }\r\n\r\n    const updateToastStat = (type, msg) => {\r\n        setToastStat({\r\n            toastType: type,\r\n            toastMsg: msg\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setIsToastShowing(false);\r\n        },2000)\r\n        return () => clearTimeout(timer);\r\n    }, [isToastShowing]) \r\n    /*----TOAST HANDLER FUNCTIONS----*/\r\n\r\n\r\n    const handleMsgClick = (id, type, name) => {\r\n        // updateMsgList([])\r\n        setIsMsgListLoading(true)\r\n        updateMsgStat(false)\r\n        updateRecipientMetadata(id, type)\r\n        updateMsgRecipient(name)\r\n        toggleIsSideBarVisible()\r\n        if (type === \"Channel\") {\r\n            getChannelData(activeUser, id, updateChannelData)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row-start-2 overflow-hidden\">\r\n            <div className=\"h-full border-r border-gray-600 flex flex-col items-start text-gray-300 bg-gray-900 no-scrollbar overflow-y-auto\">\r\n                <Disclosure>\r\n                    {({open}) => (\r\n                        <>\r\n                            <Disclosure.Button className=\"pt-6 pb-2 px-4 flex items-center\">\r\n                                <ChevronRightIcon\r\n                                    className={`${open ? 'transform rotate-90' : ''} w-5 h-5 text-gray-300 mr-2`} />\r\n                                <span>Channels</span>\r\n                            </Disclosure.Button>\r\n                            <Transition\r\n                                show={open}\r\n                                enter=\"transition duration-100 ease-out\"\r\n                                enterFrom=\"transform scale-95 opacity-0\"\r\n                                enterTo=\"transform scale-100 opacity-100\"\r\n                                leave=\"transition duration-75 ease-out\"\r\n                                leaveFrom=\"transform scale-100 opacity-100\"\r\n                                leaveTo=\"transform scale-95 opacity-0\"\r\n                                className=\"w-full pb-6\"\r\n                            >\r\n                                <Disclosure.Panel className=\"text-gray-500\" static as=\"ul\">\r\n                                    {channelList?.map(channel => (\r\n                                        <li key={channel.id} className=\"flex py-1 px-6 items-center hover:bg-gray-700 cursor-pointer\" onClick={()=>handleMsgClick(channel?.id, \"Channel\", channel?.name)}>\r\n                                            <div className=\"flex justify-center items-center h-5 w-5 mr-2 flex-shrink-0\">\r\n                                                <span className={assignBg(channel?.id)}>\r\n                                                    <img src={assignImage(channel?.id, \"Channel\")} className=\"h-5 w-5 items-center\"/>\r\n                                                </span>\r\n                                            </div>\r\n                                            <div className=\"text-gray-300 truncate text-sm\">{channel?.name}</div>\r\n                                        </li>))}\r\n                                    <div className=\"flex py-1 px-6 items-center hover:bg-gray-700 cursor-pointer text-gray-300\" onClick={toggleModal}>\r\n                                        <div className=\"flex items-center justify-center bg-gray-600 h-5 w-5 mr-2 flex-shrink-0 rounded\">\r\n                                            <PlusSmIcon className=\"h-5 w-5\" />\r\n                                        </div>\r\n                                        <span>Add channel</span>\r\n                                    </div>\r\n                                </Disclosure.Panel>\r\n                            </Transition>\r\n                        </>\r\n                     )}\r\n                </Disclosure>\r\n                {openModal && <CreateChannel openModal={openModal} setOpenModal={setOpenModal} toggleToast={toggleToast} updateToastStat={updateToastStat}/>} \r\n                <Disclosure>\r\n                {({open}) => (\r\n                    <>\r\n                        <Disclosure.Button className=\"py-2 px-4 flex items-center\">\r\n                        <ChevronRightIcon\r\n                            className={`${\r\n                                open ? 'transform rotate-90' : ''\r\n                            } w-5 h-5 text-gray-300 mr-2`}\r\n                        />\r\n                        <span>Direct Messages</span>\r\n                        </Disclosure.Button>\r\n                        <Transition\r\n                            show={open}\r\n                            enter=\"transition duration-100 ease-out\"\r\n                            enterFrom=\"transform scale-95 opacity-0\"\r\n                            enterTo=\"transform scale-100 opacity-100\"\r\n                            leave=\"transition duration-75 ease-out\"\r\n                            leaveFrom=\"transform scale-100 opacity-100\"\r\n                            leaveTo=\"transform scale-95 opacity-0\"\r\n                            className=\"w-full\"\r\n                        >\r\n                            <Disclosure.Panel className=\"text-gray-500 w-full\" static as=\"ul\">\r\n                                {!!dmList?.length\r\n                                && dmList.map((user) => (\r\n                                <li key={user.id} className=\"flex py-1 px-6 items-center hover:bg-gray-700 cursor-pointer\" onClick={()=>handleMsgClick(user?.id, \"User\", user.uid)}>\r\n                                    <div className=\"flex justify-center items-center h-5 w-5 mr-2 flex-shrink-0\">\r\n                                        <span className={assignBg(user?.id)}>\r\n                                            <img src={assignImage(user?.id, \"User\")} className=\"h-5 w-5 items-center\"/>\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className=\"text-gray-300 truncate text-sm\">{user?.uid}</div>\r\n                                </li>))}\r\n                            </Disclosure.Panel>\r\n                        </Transition>\r\n                    </>\r\n                    )}\r\n                </Disclosure>\r\n            </div>\r\n            <Transition\r\n                show={isToastShowing}\r\n                enter=\"transition-opacity duration-75\"\r\n                enterFrom=\"opacity-0\"\r\n                enterTo=\"opacity-100\"\r\n                leave=\"transition-opacity duration-150\"\r\n                leaveFrom=\"opacity-100\"\r\n                leaveTo=\"opacity-0\"\r\n            >\r\n                <Toast type={toastStat.toastType} onClick={() => {toggleToast(false)}}>{toastStat.toastMsg}</Toast>\r\n            </Transition> \r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import { PencilAltIcon } from \"@heroicons/react/outline\"\r\nimport { Menu, Transition } from '@headlessui/react'\r\nimport { ChevronDownIcon } from '@heroicons/react/solid'\r\nimport { useHistory } from 'react-router'\r\nimport { removeUserSession } from \"../utils/Utils\"\r\nimport { useContext, useEffect, Fragment } from \"react\"\r\nimport { AuthContext } from '../contexts/AuthContext'\r\nimport { SessionContext } from '../contexts/SessionContext'\r\nimport { LogoutIcon } from \"@heroicons/react/outline\"\r\n\r\n\r\nconst Workspace = ({msgStat, onClick}) => {\r\n\r\n    const history = useHistory();\r\n    const { setAuth, setUser } = useContext(AuthContext)\r\n    const {updateUserList,updateChannelList, updateMsgList, updateMsgRecipient, updateRecipientMetadata} = useContext(SessionContext);\r\n    const handleSignOutClick = () => {\r\n        removeUserSession(setAuth, setUser, history);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (msgStat === true) {\r\n            updateMsgList([])\r\n            updateMsgRecipient('')\r\n            updateRecipientMetadata('','')\r\n        } \r\n    },[msgStat])\r\n    return (\r\n        <div className=\"col-start-1 col-end-2 row-start-1 px-4 py-2 flex items-center justify-between bg-gray-900 border-b border-r border-gray-600\">\r\n            <Menu as=\"div\" className=\"relative\">\r\n                <Menu.Button className=\"text-white inline-flex justify-center items-center\">\r\n                    <h2>Avion School</h2>\r\n                    <ChevronDownIcon\r\n                        className=\"w-5 h-5 ml-2 -mr-1 text-white\"\r\n                    />\r\n                    </Menu.Button>\r\n                <Transition\r\n                    as={Fragment}\r\n                    enter=\"transition ease-out duration-100\"\r\n                    enterFrom=\"transform opacity-0 scale-95\"\r\n                    enterTo=\"transform opacity-100 scale-100\"\r\n                    leave=\"transition ease-in duration-75\"\r\n                    leaveFrom=\"transform opacity-100 scale-100\"\r\n                    leaveTo=\"transform opacity-0 scale-95\"\r\n                >\r\n                    <Menu.Items className=\"absolute left-0 w-40 mt-2 py-2 px-4 origin-top-left bg-gray-700 rounded-md ring-1 ring-black ring-opacity-5 focus:outline-none\" as=\"ul\">\r\n                        <Menu.Item as=\"li\" className=\"flex gap-2\">\r\n                                <span className=\"flex items-center justify-center text-red-300\">\r\n                                    <LogoutIcon className=\"h-5 w-5\" />\r\n                                </span>\r\n                                <button className=\"text-red-300\" onClick={()=>handleSignOutClick()}>Sign Out</button>\r\n                        </Menu.Item>\r\n                    </Menu.Items>\r\n                </Transition>\r\n            </Menu>\r\n            <span className=\"rounded-full bg-white p-2 flex justify-center items-center\" onClick={() => onClick(true)}>\r\n                <PencilAltIcon className=\"h-4 w-4\"/>\r\n            </span>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Workspace\r\n","import { useState, useContext, useEffect, Fragment } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContext'\r\nimport { SessionContext } from '../contexts/SessionContext';\r\nimport { Dialog, Transition  } from '@headlessui/react'\r\nimport {assignImage, assignBg, postInviteToChannel, useComponentVisible} from \"../utils/Utils\"\r\nimport ModalTextfield from '../components/ModalTextfield';\r\nimport { XIcon } from '@heroicons/react/solid';\r\n\r\n\r\nconst ChannelInfoModal = ({setOpenModal, openModal, toggleToast, updateToastStat}) => {\r\n    const { activeUser } = useContext(AuthContext)\r\n    const { channelData, moreChannelData, updateChannelData, userList } = useContext(SessionContext)\r\n\r\n    //handles the changes on the input box\r\n    const [searchUser, setSearchUser] = useState('')\r\n    const handleSearchUserChange = (e) => {\r\n        setSearchUser(e.target.value)\r\n        setIsComponentVisible((e.target.value !== '' ? true: false))\r\n    }\r\n    //an array that shows real-time search\r\n    const [searchUserList, setSearchUserList] = useState([])\r\n    //depending on searchUser changes, this filters the result that matches with the input\r\n    useEffect(() => {\r\n        if (searchUser !== '') {\r\n            const regex = new RegExp(`${searchUser}`, 'i')\r\n            setSearchUserList(userList?.filter(user => regex.test(user.uid)).slice(0, 10))\r\n        } else {\r\n            setSearchUserList([])\r\n            setIsComponentVisible(false)\r\n        }\r\n    },[searchUser])\r\n    //use custom hook to toggle display of search recommendations and to close modal on outside click\r\n    const { ref: inviteRef, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);\r\n\r\n    //function that invites clicked user in the array \r\n    const handleInviteUserClick = (user_id) => {\r\n        postInviteToChannel(activeUser, channelData.id, user_id, updateChannelData, toggleToast, updateToastStat, setSearchUser)\r\n        setIsComponentVisible(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <Disclosure className=\"col-start-1 col-end-2 row-start-2\">\r\n                {({open}) => (\r\n                    <>\r\n                        <Disclosure.Button className=\"text-gray-300 flex float py-2 px-4 items-center justify-end col-start-3 col-end-5 row-start-1\">\r\n                                <div className=\"flex align-center -space-x-2 overflow-hidden\">\r\n                                    {\r\n                                        moreChannelData.members && moreChannelData.members.slice(0, 3).map((user) => (\r\n                                            <div className=\"flex rounded border-2 border-gray-900\">\r\n                                                <div className=\"flex justify-center items-center h-8 w-8 overflow-hidden flex-reverse\">\r\n                                                    <span className={assignBg(user?.id)} >\r\n                                                        <img src={assignImage(user?.id, \"User\")} classname=\"h-8 w-8 items-center\"/>\r\n                                                    </span> \r\n                                                </div>\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                    <div className=\"flex justify-center items-center rounded border-2 bg-gray-900 border-gray-900\">\r\n                                    {\r\n                                        moreChannelData?.members.length > 3 && <div className=\" h-8 w-8 rounded border-2 bg-gray-900 border-gray-900\">\r\n                                                {moreChannelData.members.length}\r\n                                            </div>\r\n                                    }\r\n                                    </div>\r\n                                </div>\r\n                        </Disclosure.Button>\r\n                        <Transition\r\n                            show={open}\r\n                            enter=\"transition duration-100 ease-out\"\r\n                            enterFrom=\"transform scale-95 opacity-0\"\r\n                            enterTo=\"transform scale-100 opacity-100\"\r\n                            leave=\"transition duration-75 ease-out\"\r\n                            leaveFrom=\"transform scale-100 opacity-100\"\r\n                            leaveTo=\"transform scale-95 opacity-0\"\r\n                            className=\"row-start-2 col-start-4 flex justify-end max-w-xs \"\r\n                        >\r\n                            <Disclosure.Panel className=\"w-60 text-gray-500 border-l border-gray-600 bg-gray-900\" static as=\"ul\">\r\n                                <div>\r\n                                    <div className=\"h-full p-4 text-gray-300 bg-gray-900\">\r\n                                \r\n                                    <ModalTextfield onChange={handleSearchUserChange} id='inviteUser' type='text' placeholder=\"Invite a friend\" value={searchUser}\r\n                                    inputClass=\"mt-2 py-1 px-2 rounded bg-gray-800 text-sm text-gray-300 border-transparent focus:ring-0 focus:outline-none focus:border-transparent\"/>\r\n\r\n                                    <ul className=\"pt-2\">          \r\n                                        {\r\n                                            searchUserList?.map((user) => (\r\n                                                <li key={user.id} className=\"flex py-2 px-2 items-center hover:bg-gray-700 cursor-pointer\" onClick={()=>handleInviteUserClick(user.id)}>\r\n                                                    <div className=\"flex justify-center items-center h-5 w-5 mr-2 \">\r\n                                                        <span className={assignBg(user?.id)}>\r\n                                                            <img src={assignImage(user?.id, \"User\")} className=\"h-5 w-5 items-center\"/>\r\n                                                        </span>\r\n                                                    </div>\r\n                                                    <div className=\"text-gray-300 text-sm\">{user?.uid}</div>\r\n                                                </li>\r\n                                            ))\r\n                                        }\r\n                                    </ul>\r\n                                    </div>\r\n                                    <div className=\"h-full p-4 flex flex-col items-start text-gray-300 bg-gray-900\">\r\n                                    <span className=\"pb-4\">Channel Members:</span>\r\n                                    <ul className=\"w-full\">\r\n                                        {\r\n                                            moreChannelData.members && moreChannelData.members.map((user) => (\r\n                                                <li key={user.id} className=\"flex py-1 px-2 items-center\">\r\n                                                    <div className=\" flex justify-center items-center h-5 w-5 mr-2 flex-shrink-0\">\r\n                                                        <span className={assignBg(user?.id)}>\r\n                                                            <img src={assignImage(user?.id, \"User\")} className=\"h-5 w-5 items-center\"/>\r\n                                                        </span>\r\n                                                    </div>\r\n                                                    <div className=\"text-gray-300 text-sm truncate\">{user?.uid}</div>\r\n                                                </li>\r\n                                            ))\r\n                                        }\r\n                                    </ul>\r\n                                    </div>\r\n                                </div>\r\n                            </Disclosure.Panel>\r\n                        </Transition>\r\n                    </>\r\n                )}\r\n            </Disclosure>\r\n            <Transition\r\n                show={isToastShowing}\r\n                enter=\"transition-opacity duration-75\"\r\n                enterFrom=\"opacity-0\"\r\n                enterTo=\"opacity-100\"\r\n                leave=\"transition-opacity duration-150\"\r\n                leaveFrom=\"opacity-100\"\r\n                leaveTo=\"opacity-0\"\r\n            >\r\n                <Toast type={toastStat.toastType} onClick={() => {toggleToast(false)}}>{toastStat.toastMsg}</Toast>\r\n            </Transition> */}\r\n\r\n\r\n            <Transition appear show={openModal} as={Fragment}>\r\n                <Dialog\r\n                    as=\"div\"\r\n                    className=\"fixed inset-0 z-10 overflow-y-auto\"\r\n                    onClose={() => setOpenModal(false)}\r\n                >\r\n                <div className=\"min-h-screen px-4 text-center \">\r\n                    <Transition.Child\r\n                        as={Fragment}\r\n                        enter=\"ease-out duration-300\"\r\n                        enterFrom=\"opacity-0\"\r\n                        enterTo=\"opacity-100\"\r\n                        leave=\"ease-in duration-200\"\r\n                        leaveFrom=\"opacity-100\"\r\n                        leaveTo=\"opacity-0\"\r\n                    >\r\n                    <Dialog.Overlay className=\"fixed inset-0\" />\r\n                    </Transition.Child>\r\n                    {/* This element is to trick the browser into centering the modal contents. */}\r\n                    <span\r\n                        className=\"inline-block h-screen align-middle\"\r\n                        aria-hidden=\"true\"\r\n                    >\r\n                \r\n                    </span>\r\n                    <Transition.Child\r\n                        as={Fragment}\r\n                        enter=\"ease-out duration-300\"\r\n                        enterFrom=\"opacity-0 scale-95\"\r\n                        enterTo=\"opacity-100 scale-100\"\r\n                        leave=\"ease-in duration-200\"\r\n                        leaveFrom=\"opacity-100 scale-100\"\r\n                        leaveTo=\"opacity-0 scale-95\"\r\n                    >\r\n                    <div className=\"inline-block modal-width bg-gray-800 p-4 my-8 text-left align-middle transition-all sm:transform shadow-md rounded-lg border border-black min-w-200\">\r\n                        <div className=\"flex text-gray-100 text-lg justify-between items-center mb-6\"> \r\n                            <h3>Channel Information</h3>\r\n                            <XIcon className=\"h-5 w-5 cursor-pointer\" onClick={() => setOpenModal(false)}/>\r\n                        </div>\r\n                        <div className=\"mb-4 text-gray-300 relative\">\r\n                            <ModalTextfield onChange={handleSearchUserChange} id='inviteUser' type='text' placeholder=\"Invite a friend\" value={searchUser}\r\n                                inputClass=\"mt-2 py-1 px-2 rounded bg-gray-900 text-sm text-gray-300 border-transparent focus:ring-0 focus:outline-none focus:border-transparent\"/>\r\n                            <div ref={inviteRef} className=\"absolute z-10 w-full\">\r\n                                {isComponentVisible && <div className=\"text-gray-200 max-h-96 w-full overflow-y-auto border-gray-600 border rounded-lg bg-gray-700 py-2 modified-scrollbar\">\r\n                                    <ul>          \r\n                                        {\r\n                                            searchUserList?.map((user) => (\r\n                                                <li key={user.id} className=\"px-6 py-1 flex gap-2 text-white hover:bg-white hover:text-gray-700 cursor-pointer\" onClick={()=>handleInviteUserClick(user.id)}>\r\n                                                    <div className=\"flex justify-center items-center h-5 w-5\">\r\n                                                        <span className={assignBg(user?.id)}>\r\n                                                            <img src={assignImage(user?.id, \"User\")} className=\"h-5 w-5 items-center\"/>\r\n                                                        </span>\r\n                                                    </div>\r\n                                                    <div className=\"text-sm\">{user?.uid}</div>\r\n                                                </li>\r\n                                            ))\r\n                                        }\r\n                                    </ul>\r\n                                </div>}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex flex-col items-start text-gray-300 overflow-y-auto modified-scrollbar max-h-56\">\r\n                            <span className=\"pb-4\">Channel Members:</span>\r\n                            <ul className=\"w-full\">\r\n                                {\r\n                                    moreChannelData.members && moreChannelData.members.map((user) => (\r\n                                        <li key={user.id} className=\"flex py-1 px-2 items-center\">\r\n                                            <div className=\" flex justify-center items-center h-5 w-5 mr-2 flex-shrink-0\">\r\n                                                <span className={assignBg(user?.id)}>\r\n                                                    <img src={assignImage(user?.id, \"User\")} className=\"h-5 w-5 items-center\"/>\r\n                                                </span>\r\n                                            </div>\r\n                                            <div className=\"text-gray-300 text-sm truncate\">{user?.uid}</div>\r\n                                        </li>\r\n                                    ))\r\n                                }\r\n                            </ul>\r\n                        </div>  \r\n                    </div>\r\n                    </Transition.Child>\r\n                </div>\r\n                </Dialog>\r\n            </Transition> \r\n        </> \r\n    )\r\n}\r\n\r\nexport default ChannelInfoModal\r\n","import { useContext, useState, useEffect } from \"react\";\r\nimport { assignImage, assignBg } from \"../utils/Utils\";\r\nimport { SessionContext } from '../contexts/SessionContext';\r\nimport ChannelInfoModal from './ChannelnfoModal';\r\nimport Toast from \"./Toast\";\r\nimport { Transition } from '@headlessui/react'\r\n\r\nconst MainHeader = () => {\r\n    const {msgRecipient, recipientMetadata, moreChannelData,} = useContext(SessionContext);\r\n    const [openModal, setOpenModal] = useState(false)\r\n    const toggleModal = () => {\r\n        setOpenModal(!openModal)\r\n    }\r\n    const [isToastShowing, setIsToastShowing] = useState(false)\r\n    const [toastStat, setToastStat] = useState({\r\n        toastType: '',\r\n        toastMsg: ''\r\n    });\r\n\r\n    /*----TOAST HANDLER FUNCTIONS----*/\r\n    const toggleToast = (bool) => {\r\n        setIsToastShowing(bool);\r\n    }\r\n\r\n    const updateToastStat = (type, msg) => {\r\n        setToastStat({\r\n            toastType: type,\r\n            toastMsg: msg\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setIsToastShowing(false);\r\n        },2000)\r\n        return () => clearTimeout(timer);\r\n    }, [isToastShowing]) \r\n    /*----TOAST HANDLER FUNCTIONS----*/\r\n\r\n    return (\r\n        <div className=\"flex justify-between border-b border-gray-600\">\r\n            <div className=\"flex items-center py-2 px-4\">\r\n                {!!(recipientMetadata?.id !== '') && \r\n                    <div className=\"flex justify-center items-center h-8 w-8 mr-2\">\r\n                        <span className={assignBg(recipientMetadata?.id)}>\r\n                            <img src={assignImage(recipientMetadata?.id, recipientMetadata?.type)} className=\"h-8 w-8 items-center\"/>\r\n                            </span>\r\n                    </div>\r\n                }\r\n                <h3 className=\"text-white\">{recipientMetadata.id === '' ? 'New message' : msgRecipient}</h3>\r\n            </div>\r\n            <div className=\"text-gray-300 py-2 px-4 cursor-pointer\" onClick={toggleModal}>\r\n                <div className=\"rounded-lg border-b border-t border-r border-gray-300 flex items-center\">\r\n                    <div className=\"flex align-center -space-x-2 overflow-hidden\">\r\n                        {\r\n                            moreChannelData.members && moreChannelData.members.slice(0, 3).map((user) => (\r\n                                <div className=\"inline-block rounded ring-2 ring-gray-600\">\r\n                                    <div className=\"flex justify-center items-center h-8 w-8\">\r\n                                        <span className={assignBg(user?.id)} >\r\n                                            <img src={assignImage(user?.id, \"User\")} classname=\"h-8 w-8 items-center\"/>\r\n                                        </span> \r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    {moreChannelData?.members.length > 3 && \r\n                    <div className=\"h-8 w-8 pl-2 mr-4 flex items-center\">\r\n                        {moreChannelData.members.length}\r\n                    </div>\r\n                    }\r\n                </div>\r\n                \r\n            </div>\r\n            <ChannelInfoModal openModal={openModal} setOpenModal={setOpenModal} toggleToast={toggleToast} updateToastStat={updateToastStat}/>\r\n            <Transition\r\n                show={isToastShowing}\r\n                enter=\"transition-opacity duration-75\"\r\n                enterFrom=\"opacity-0\"\r\n                enterTo=\"opacity-100\"\r\n                leave=\"transition-opacity duration-150\"\r\n                leaveFrom=\"opacity-100\"\r\n                leaveTo=\"opacity-0\"\r\n            >\r\n                <Toast type={toastStat.toastType} onClick={() => {toggleToast(false)}}>{toastStat.toastMsg}</Toast>\r\n            </Transition>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default MainHeader\r\n","import { assignImage, assignBg } from \"../utils/Utils\";\r\n\r\nconst RecipientResults = ({onClick, recipientList, resultChannelList}) => {\r\n    return (\r\n        <div className=\"text-gray-200 max-h-96 overflow-y-auto ml-6 mr-2 border-gray-600 border rounded-lg bg-gray-700 py-2 modified-scrollbar\">\r\n            { !!resultChannelList?.length && resultChannelList.map((channel) => (\r\n                <div key={channel.id} onClick={() => onClick({identifier: channel?.name, id: channel?.id, type:'Channel'})}>\r\n                    <div className=\"px-6 py-1 flex gap-2 text-white hover:bg-white hover:text-gray-700 cursor-pointer\">\r\n                        <span className=\"flex justify-center items-center\">\r\n                            <span className={assignBg(channel?.id)}>\r\n                                <img src={assignImage(channel?.id, \"Channel\")} className=\"h-5 w-5 items-center rounded\"/>\r\n                            </span>\r\n                        </span>\r\n                        <span>\r\n                            #{channel.name}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            { !!recipientList?.length && recipientList.map((recipient) => (\r\n                <div key={recipient.id} onClick={() => onClick({identifier: recipient?.email, id: recipient?.id, type:'User'})}>\r\n                    <div className=\"px-6 py-1 flex gap-2 text-white hover:bg-white hover:text-gray-700 cursor-pointer\">\r\n                        <span className=\"flex justify-center items-center\">\r\n                            <span className={assignBg(recipient?.id)}>\r\n                                <img src={assignImage(recipient?.id, \"User\")} className=\"h-5 w-5 items-center\"/>\r\n                            </span>\r\n                        </span>\r\n                        <span>\r\n                            {recipient.email}\r\n                        </span>\r\n                        <span>\r\n                            (UID: {recipient.id})\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            {(!resultChannelList?.length && !recipientList?.length) &&\r\n            <div className=\"py-2 px-6\">\r\n                No items\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecipientResults\r\n","\r\nconst MessageSkeleton = () => {\r\n    return (\r\n        <div className=\"p-4 max-w-2xl w-full\">\r\n            <div className=\"animate-pulse flex flex-col space-y-4\">\r\n                <div className=\"flex space-x-4 items-center\">\r\n                    <div className=\"rounded bg-gray-400 h-8 w-8\"></div>\r\n                        <div className=\"flex-1 items-center py-1\">\r\n                            <div className=\"h-4 bg-gray-400 rounded w-3/4\"></div>\r\n                            <div className=\"space-y-2\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"h-2 bg-gray-400 rounded\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageSkeleton\r\n","import { useState, useRef, useEffect, useContext } from \"react\";\r\nimport { PaperAirplaneIcon } from \"@heroicons/react/solid\";\r\nimport { SessionContext } from '../contexts/SessionContext';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport RecipientResults from \"./RecipientResults\";\r\nimport { postMsg, getAllMsgs, assignImage, assignBg, useComponentVisible, getChannelData} from \"../utils/Utils\";\r\nimport MessageSkeleton from \"../components/MessageSkeleton\";\r\n\r\n\r\nconst ChatInterface = ({msgStat, updateMsgStat}) => {\r\n    const {userList, channelList, channelData, updateChannelData, msgRecipient, updateMsgRecipient, recipientMetadata, updateRecipientMetadata, msgList, updateMsgList, moreChannelData, isMsgListLoading, setIsMsgListLoading} = useContext(SessionContext);\r\n    const {activeUser} = useContext(AuthContext)\r\n    const msgRef = useRef();\r\n    //Create local state for mapped search results of users\r\n    const [recipientList, setRecipientList] = useState(null);\r\n    //Create local state for mapped search results\r\n    const [resultChannelList, setResultChannelList] = useState(null);\r\n    //use custom hook to toggle display of search recommendations and to close modal on outside click\r\n    const { ref: recipientRef, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);\r\n\r\n    //Every time the input value of the search changes, as long as it's not empty, filter through the list of total customers and check if the account exists\r\n    //If input is blank, then display total list of customers\r\n    useEffect(() => {\r\n        if (msgRecipient !== '') {\r\n            const regex = new RegExp(`${msgRecipient}`, 'i')\r\n            setRecipientList(userList?.filter(user => (regex.test(user.email) || regex.test(user.id))).slice(0, 10));\r\n            setResultChannelList(channelList?.filter(channel => (regex.test(channel.name))));\r\n        } else {\r\n            setRecipientList([])\r\n            setResultChannelList([])\r\n            setIsComponentVisible(false)\r\n            updateRecipientMetadata('','')\r\n            // updateMsgList([])\r\n        }\r\n    },[msgRecipient])\r\n\r\n    // useEffect(() => {\r\n    //     const timer = setInterval(() => {\r\n    //         if (activeUser) {\r\n    //         getAllMsgs(activeUser, recipientMetadata?.id, recipientMetadata?.type)\r\n    //             .then(msgs => updateMsgList(msgs))\r\n    //             .catch(e => console.error(e))\r\n    //         }\r\n    //     }, 1000)\r\n    //     return ()=>{clearInterval(timer)}\r\n    // },[recipientMetadata])\r\n\r\n    useEffect(() => {\r\n        if (activeUser) {\r\n        getAllMsgs(activeUser, recipientMetadata?.id, recipientMetadata?.type)\r\n            .then(msgs => updateMsgList(msgs))\r\n            .catch(e => console.error(e))\r\n        }\r\n    },[recipientMetadata])\r\n\r\n    useEffect(() => {\r\n        if (msgStat === true) {\r\n            updateMsgRecipient('')\r\n            updateRecipientMetadata('','')\r\n            // updateMsgList([])\r\n        } \r\n    },[msgStat])\r\n\r\n    const handleOnChange = (e) => {\r\n        updateMsgRecipient(e.target.value)\r\n        setIsComponentVisible((e.target.value !== '' ? true: false))\r\n    }\r\n\r\n    const handleRecipientSelect = ({identifier, id, type}) => {\r\n        // updateMsgList([])\r\n        setIsMsgListLoading(true)\r\n        updateMsgRecipient(identifier)\r\n        updateRecipientMetadata(id, type)\r\n        setIsComponentVisible(false)\r\n        if (type === \"Channel\") {\r\n            getChannelData(activeUser, id, updateChannelData)\r\n        }\r\n    }\r\n\r\n    const handleMsgSubmit = (e, type) => {\r\n        if (msgRecipient !== '') {\r\n            if (type === 'click' || (type === \"keypress\" && e.key === \"Enter\" && !e.shiftKey)) {\r\n                e.preventDefault();\r\n                postMsg(activeUser, recipientMetadata.id, msgRef.current.value, recipientMetadata.type)\r\n                    .then(msgs => {\r\n                        updateMsgList(msgs);\r\n                        msgRef.current.value = ''\r\n                        updateMsgStat(false);\r\n                    })\r\n                    .catch(e => console.error(e))\r\n            }\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"col-start-2 col-end-4 row-start-2 flex flex-col overflow-hidden flex-grow\">\r\n            {msgStat &&\r\n                <div className=\"flex text-gray-300 items-center p-4 border-b border-gray-600 relative\">\r\n                    <p className=\"pr-4\">To:</p>\r\n                    {!!recipientMetadata.id && \r\n                        <span className=\"flex justify-center items-center mr-1\">\r\n                            <span className={assignBg(recipientMetadata?.id)}>\r\n                                <img src={assignImage(recipientMetadata?.id, recipientMetadata?.type)} className=\"h-5 w-5 items-center\"/>\r\n                            </span>\r\n                        </span>\r\n                    }\r\n                    <input type=\"text\" className=\"bg-transparent w-full border-0 focus:ring-0 focus:outline-none\" \r\n                    placeholder=\"#a-channel, @uid, or somebody@example.com\" value={msgRecipient} onChange={handleOnChange}/>\r\n                    <div ref={recipientRef} className=\"recipient-results absolute z-10\">\r\n                        { isComponentVisible && <RecipientResults onClick={handleRecipientSelect} resultChannelList={resultChannelList} recipientList={recipientList}/>}\r\n                    </div>\r\n                </div>\r\n            }\r\n            <div className=\"overflow-auto flex flex-col-reverse modified-scrollbar h-full\">\r\n                <div className='py-4 flex-grow text-gray-200 flex flex-col'>\r\n                    <div className=\"mt-auto\">\r\n                        {!!(recipientMetadata.id !== '') && !isMsgListLoading \r\n                        ?\r\n                        <div className=\"flex flex-col p-4 mb-6 gap-2\">\r\n                            <div className=\"flex gap-2 items-center\">\r\n                                <span className=\"flex justify-center items-center mr-1\">\r\n                                    <span className={assignBg(recipientMetadata?.id)}>\r\n                                        <img src={assignImage(recipientMetadata?.id, recipientMetadata?.type)} className=\"h-8 w-8 items-center\"/>\r\n                                    </span>\r\n                                </span>\r\n                                <div className={recipientMetadata?.type === \"Channel\" ? 'font-bold text-lg': ''}>\r\n                                    {msgRecipient}\r\n                                </div>\r\n                            </div>\r\n                            <p>\r\n                                { recipientMetadata?.type === \"User\"\r\n                                ? `This is the very beginning of your direct message history with @${msgRecipient}. Only the two of you are in this conversation, and no one else can join it.`\r\n                                : `User ${moreChannelData?.creator[0]?.uid} created this private channel on ${new Date(channelData?.created_at).toLocaleDateString([],{month:'long', day:'numeric'})}. This is the very beginning of the #${msgRecipient} channel.`}\r\n                            </p>\r\n                        </div>\r\n                        : !!isMsgListLoading && <MessageSkeleton/>}\r\n                        {!!(msgList?.length && !isMsgListLoading) \r\n                        && msgList.map((msg, i, arr) => (\r\n                        <div key={msg.id}>\r\n                            {!!((i > 0 && (new Date(arr[i]?.created_at).getDate() !== new Date(arr[i-1]?.created_at).getDate())) || i === 0) &&\r\n                            <div className=\"relative flex items-center justify-center my-5\">\r\n                                <span className=\"absolute rounded-full bg-gray-800 px-4 py-2 border border-gray-600 text-xs\">\r\n                                    {new Date(arr[i]?.created_at).toLocaleDateString('en-US',{weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'})}\r\n                                </span>\r\n                                <div className=\"h-px bg-gray-600 w-full\">\r\n                                </div>\r\n                            </div>}\r\n                            <div className=\"flex items-center gap-2 py-1 px-4 group hover:bg-gray-700\">\r\n                                {(i > 0 && (arr[i].sender.email !== arr[i-1].sender.email)) || i === 0 || (new Date(arr[i]?.created_at).getDate() !== new Date(arr[i-1]?.created_at).getDate()) ? \r\n                                <div className=\"flex justify-center items-center h-8 w-8\">\r\n                                    <span className={assignBg(msg?.sender.id)}>\r\n                                        <img src={assignImage(msg?.sender.id, \"User\")} className=\"h-8 w-8 items-center\"/>\r\n                                    </span>\r\n                                </div>\r\n                                :\r\n                                <div className=\"w-8 rounded\">\r\n                                    <p className=\"text-xs opacity-0 group-hover:opacity-100\">{new Date(msg.created_at).toLocaleTimeString([],{hour: '2-digit', minute: '2-digit', hour12:true}).replace(\"AM\",\"\").replace(\"PM\",\"\")}</p>\r\n                                </div>\r\n                                }\r\n                                <div className=\"flex flex-col\">\r\n                                    {!!((i > 0 && (arr[i].sender.email !== arr[i-1].sender.email)) || i === 0 || (new Date(arr[i]?.created_at).getDate() !== new Date(arr[i-1]?.created_at).getDate())) &&  \r\n                                    <div className=\"flex items-center\">\r\n                                        <p className=\"text-sm font-bold\">{msg.sender.email}</p>\r\n                                        <p className=\"text-xs pl-2\">{new Date(msg.created_at).toLocaleTimeString([],{hour: '2-digit', minute: '2-digit', hour12: true})}</p>\r\n                                    </div>\r\n                                    }\r\n                                    <p className=\"text-sm\">{msg.body}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>))\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"mt-auto flex gap-2 p-4\">\r\n                <textarea className=\"custom-textarea\" ref={msgRef} placeholder=\"Enter a message\" onKeyPress={(e)=>handleMsgSubmit(e,'keypress')}/>\r\n                <div className={recipientMetadata?.id === ''\r\n                    ? \"bg-green-900 flex items-center justify-center px-4 rounded\"\r\n                    :\"bg-green-300 hover:bg-green-500 cursor-pointer flex items-center justify-center px-4 rounded\"}\r\n                    onClick={(e)=>handleMsgSubmit(e,'click')}>\r\n                    <PaperAirplaneIcon className=\"h-6 w-6 transform rotate-45 -mt-1 pb-1 text-white\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatInterface\r\n\r\n\r\n","import { useContext, useEffect, useState } from \"react\"\r\n\r\n/** ICONS **/\r\nimport { MenuAlt1Icon } from '@heroicons/react/solid';\r\n\r\n/** METHODS **/\r\nimport { AuthContext } from '../contexts/AuthContext'\r\nimport { assignBg, assignImage } from '../utils/Utils';\r\nimport { SessionContext } from \"../contexts/SessionContext\";\r\n\r\n\r\nconst MobileNavbar = ({toggleIsSideBarVisible}) => {\r\n\r\n    const { activeUser } = useContext(AuthContext)\r\n    const { userList } = useContext(SessionContext)\r\n\r\n    const [activeUserProfile, setActiveUserProfile] = useState([])\r\n\r\n    useEffect(() => {\r\n        if(activeUser) {\r\n            setActiveUserProfile(userList?.filter(user => user.uid === activeUser.uid))     \r\n        }\r\n    }, [activeUser])\r\n\r\n\r\n    // button for sidebar toggle and getting the profile picture of the activeUser\r\n    return(\r\n        <div className=\"col-start-1 col-end-5 row-start-1 flex items-center py-2 px-4 border-b border-gray-600\">\r\n            <span className=\" w-20 bg-white p-2 flex self-start\">\r\n                <MenuAlt1Icon onClick={toggleIsSideBarVisible} className=\"h-4 w-4\"/>\r\n            </span>\r\n\r\n            {\r\n            activeUserProfile && <div className=\"text-gray-300 flex py-1 px-2 self-end items-center\">   \r\n                <div className=\" flex justify-center items-center h-5 w-5 mr-2 flex-shrink-0\">\r\n                    <span className={assignBg(activeUserProfile[0]?.id)}>\r\n                        <img src={assignImage(activeUserProfile[0]?.id, \"User\")} className=\"h-5 w-5 items-center\"/>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default MobileNavbar\r\n","import { useState, useEffect, useContext} from 'react'\r\nimport { AuthContext } from '../contexts/AuthContext'\r\nimport { SessionContext } from '../contexts/SessionContext'\r\nimport { Redirect } from 'react-router-dom';\r\nimport Sidebar from '../parts/Sidebar';\r\nimport Workspace from '../parts/Workspace';\r\nimport MainHeader from '../parts/MainHeader';\r\nimport ChatInterface from '../parts/ChatInterface';\r\nimport { getAllUsers, getAllSubscribedChannels } from '../utils/Utils'\r\nimport MobileNavbar from '../parts/MobileNavbar';\r\n\r\n\r\nconst Main = () => {\r\n    const {isAuthenticated, setAuth, activeUser, setUser} = useContext(AuthContext);\r\n    const {updateUserList,updateChannelList} = useContext(SessionContext);\r\n    const [isNewMessage, setIsNewMessage] = useState(false);\r\n    const updateIsNewMessage = (bool) => {\r\n        setIsNewMessage(bool);\r\n    }\r\n    useEffect(() => {\r\n        if (activeUser) {\r\n            getAllUsers(activeUser, updateUserList)\r\n            getAllSubscribedChannels(activeUser, updateChannelList)\r\n        }\r\n    },[activeUser])\r\n    const [isSideBarVisible, setIsSideBarVisible] = useState(true);\r\n    const toggleIsSideBarVisible = () => {\r\n        setIsSideBarVisible(!isSideBarVisible);\r\n    }\r\n    let sidebarClass = \"absolute sm:static w-full h-full sm:col-start-1 sm:row-start-1 sm:row-end-3 z-20 sm:z-0 grid sidebar-grid\"\r\n    if (!isSideBarVisible) {\r\n        sidebarClass = \"hidden absolute w-full h-full sm:grid sm:static sm:col-start-1 sm:row-start-1 sm:row-end-3 z-20 sm:z-0 sidebar-grid\"\r\n    }\r\n\r\n    if (!isAuthenticated) {\r\n        return <Redirect to='/signin' />\r\n    }\r\n\r\n    return (\r\n        <div className=\"h-full flex flex-col w-screen sm:grid main-grid bg-gray-800\">\r\n            <MobileNavbar toggleIsSideBarVisible={toggleIsSideBarVisible} />\r\n            <div className={sidebarClass}>\r\n                <Workspace msgStat={isNewMessage} onClick={updateIsNewMessage}/>\r\n                <Sidebar updateMsgStat={updateIsNewMessage} toggleIsSideBarVisible={toggleIsSideBarVisible}/>\r\n            </div>\r\n            <MainHeader/>\r\n            <ChatInterface msgStat={isNewMessage} activeUser={activeUser} updateMsgStat={updateIsNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport Signin from './pages/Signin';\r\nimport Signup from './pages/Signup';\r\n\r\nimport Main from './pages/Main'\r\nimport AuthContextProvider from './contexts/AuthContext';\r\nimport SessionContextProvider from './contexts/SessionContext';\r\nimport CreateChannel from './parts/CreateChannel';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    //We add the Context Provider component\r\n    <AuthContextProvider>\r\n      <SessionContextProvider>\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/signin\">\r\n              <Signin/>\r\n            </Route>\r\n            <Route path=\"/signup\">\r\n              <Signup/>\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Main/>\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </SessionContextProvider>\r\n    </AuthContextProvider>\r\n  );\r\n}\r\n\r\n// 1. User is able to create his/her account with email and password\r\n// - Sign up page with: \r\n// - Slack logo component [ok]\r\n// - \"Join Avion School h2 native\" [ok]\r\n// - Form part component [ok]\r\n//   - Email address input + validation\r\n//     - Validation: \r\n//        - Not blank\r\n//        - Validating if email using regex\r\n//        - Uses useRef \r\n//   - Password input + validation\r\n//     - Validation: \r\n//        - Not blank\r\n//        - Minimum 8 characters\r\n//   - Password confirmation + validation\r\n//     - Validation: \r\n//        - Must match password\r\n//   - Sign up Button component\r\n//      - Submit the form, POST data to API, wait for response. If no error, display success message. \r\n//      - If error (422) then display error toast with error message from API\r\n// - Create account link component -> Link to Signup Page Component\r\n// 2. User is able to login his/her credentials\r\n// - Login Page with: \r\n// - Slack logo component\r\n// - \"Sign in to Avion School h2 native\"\r\n// - Form part component\r\n//   - Email address input + validation\r\n//   - Password input + validation\r\n//   - Sign in Button component\r\n// - Create account link component -> Link to Signup Page Component\r\n// 3. User is able to create new channel\r\n// - CreateChannel Component\r\n//   - Input field for channel name\r\n//   - Form with list of all users with checkbox -> Generate via API fetch \"/api/v1/users\"\r\n//   - By default user is part of created channel\r\n//   - On Form submit, POST channel name and selected users to API\r\n// User is able to add users on a channel\r\n// User is able to send message to other user (Direct message)\r\n// User is able to send message to a channel\r\n// User is able to receive message from other user (Direct message)\r\n// User is able to receive message from his/her channels\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}